name: CI

on:
    repository_dispatch:
        types: [rebuild]
    pull_request:
        branches:
        -   master
    push:
        branches:
        -   master

jobs:
    init:
        runs-on: ubuntu-latest
        outputs:
            skip: ${{ steps.ci-skip-step.outputs.ci-skip }}
        steps:
        -   uses: actions/checkout@v2
            with:
                fetch-depth: 0
        -   id: ci-skip-step
            uses: mstachniuk/ci-skip@master
            with:
                commit-filter: '[ci skip];[ci-skip];[skip ci];[skip-ci]'
                commit-filter-separator: ;

    lint:
        needs: init
        if: ((github.event_name == 'repository_dispatch' && github.event.action == 'rebuild') || needs.init.outputs.skip == 'false')
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
            with:
                fetch-depth: 0
        -   name: Set up Python
            uses: actions/setup-python@v2
            with:
                python-version: 3.8

        -   uses: actions/cache@v2
            with:
                path: ~/.cache/pre-commit
                key: precommit-${{ env.pythonLocation }}-${{ hashFiles('.pre-commit-config.yaml') }}
                restore-keys: |
                    precommit-${{ env.pythonLocation }}-
                    precommit-

        -   name: Install dependencies
            run: |
                python -m pip install --upgrade pip
                pip install tox

        -   name: Linting
            run: |
                tox -e lint

    test:
        needs: init
        runs-on: ubuntu-latest
        timeout-minutes: 30
        steps:
        -   name: Get the triggering event
            run: |
                echo "${{ github.event_name }} ${{ github.event.action }}"
        -   uses: actions/checkout@v2
            with:
                fetch-depth: '0'
        -   name: Set up Python 3.8
            uses: actions/setup-python@v2
            with:
                python-version: 3.8

        -   name: Get pip cache dir
            id: pip-cache-dir
            run: |
                echo "::set-output name=dir::$(pip cache dir)"

        -   name: Restore pip cache
            uses: actions/cache@v2
            with:
                path: ${{ steps.pip-cache-dir.outputs.dir }}
                key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
                restore-keys: |
                    pip-${{ runner.os }}-

        -   name: Install dependencies
            run: |
                python -m pip install --upgrade pip
                pip install tox tox-gh-actions

        -   name: Restore data cache
            id: data-cache
            uses: actions/cache@v2
            with:
                path: |
                    ~/.cache/squidpy/*.tiff
                    ~/.cache/squidpy/*.h5ad
                key: data-${{ hashFiles('**/download_data.py') }}
        -   name: Download datasets
            # TODO: remove -q once squidpy is public
            if: steps.data-cache.outputs.cache-hit != 'true'
            run: |
                tox -e download-data -q
            env:
                SQUIDPY_DOWNLOAD_TOKEN: ${{ secrets.SQUIDPY_DOWNLOAD_TOKEN }}

        -   name: Testing
            # TODO: remove -q once squidpy is public
            run: |
                tox -q
            env:
                PLATFORM: ubuntu-latest
                SQUIDPY_DOWNLOAD_TOKEN: ${{ secrets.SQUIDPY_DOWNLOAD_TOKEN }}

    regenerate:
        if: ((github.event_name == 'repository_dispatch' && github.event.action == 'rebuild') || github.event_name == 'push') && github.ref == 'refs/heads/master'
        needs: [lint, test]
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
            with:
                ref: ${{ github.head_ref }}
        -   name: Set up Python 3.8
            uses: actions/setup-python@v2
            with:
                python-version: 3.8

        -   name: Get pip cache dir
            id: pip-cache-dir
            run: |
                echo "::set-output name=dir::$(pip cache dir)"

        -   name: Cache pip
            uses: actions/cache@v2
            with:
                path: ${{ steps.pip-cache-dir.outputs.dir }}
                key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                restore-keys: |
                    ${{ runner.os }}-pip-

        -   name: Install dependencies
            run: |
                python -m pip install --upgrade pip
                pip install tox tox-gh-actions
                sudo apt install pandoc optipng

        -   name: Regenerate documentation
            # TODO: remove -q once squidpy is public
            run: |
                tox -q -e docs,check-docs
            env:
                PLATFORM: ubuntu-latest
                SQUIDPY_DOWNLOAD_TOKEN: ${{ secrets.SQUIDPY_DOWNLOAD_TOKEN }}

        -   name: Temporarily update .gitignore
            # git-auto-commit-action does not support: git add --force
            run: |
                sed -i -E 's%docs/source/(auto_\*|gen_modules/)%%g' -- .gitignore
                git status -s -- add docs/source/auto_* docs/source/gen_modules/backreferences/*

        -   name: Commit changes
            uses: stefanzweifel/git-auto-commit-action@v4.8.0
            with:
                commit_message: '[auto] Regenerate tutorials/examples'
                file_pattern: docs/source/auto_* docs/source/gen_modules/backreferences/*
                commit_user_name: CI
                skip_dirty_check: false
                skip_fetch: true

        -   name: Request documentation rebuild
            # TODO: if: always()?
            if: steps.auto-commit-action.outputs.changes_detected == 'true'
            run: |
                echo "TODO: update rebuild secrets..."
            # curl -X POST -d "branches=master" -d "token=${{ secrets.RTD_TOKEN }}" "${{ secrets.RTD_WEBHOOK }}"
