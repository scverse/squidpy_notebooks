name: CI

on:
    repository_dispatch:
        types: [rebuild]
    pull_request:
        branches: [master]
    push:
        branches: [master]

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
            with:
                fetch-depth: 0
        -   name: Set up Python
            uses: actions/setup-python@v2
            with:
                python-version: 3.9

        -   uses: actions/cache@v2
            with:
                path: ~/.cache/pre-commit
                key: precommit-${{ env.pythonLocation }}-${{ hashFiles('.pre-commit-config.yaml') }}

        -   name: Install dependencies
            run: |
                sudo apt install pandoc optipng
                python -m pip install --upgrade pip
                pip install tox

        -   name: Lint
            run: |
                tox -e lint,check-docs

    test:
        runs-on: ubuntu-latest
        steps:
        -   name: Get the triggering event
            run: |
                echo "Event: ${{ github.event_name }}, action: ${{ github.event.action }}"
        -   uses: actions/checkout@v2
            with:
                fetch-depth: 0

        -   name: Set up Python 3.9
            uses: actions/setup-python@v2
            with:
                python-version: 3.9

        -   name: Get pip cache dir
            id: pip-cache-dir
            run: |
                echo "::set-output name=dir::$(pip cache dir)"

        -   name: Restore pip cache
            uses: actions/cache@v2
            with:
                path: ${{ steps.pip-cache-dir.outputs.dir }}
                key: pip-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}

        -   name: Install dependencies
            run: |
                python -m pip install --upgrade pip
                pip install tox tox-gh-actions

        -   name: Restore data cache
            id: data-cache
            uses: actions/cache@v2
            with:
                path: |
                    ~/.cache/squidpy/*.tiff
                    ~/.cache/squidpy/*.h5ad
                key: data-${{ hashFiles('**/download_data.py') }}

        -   name: Download datasets
            if: steps.data-cache.outputs.cache-hit != 'true'
            run: |
                tox -e download-data

        -   name: Test
            env:
                PLATFORM: ubuntu-latest
            run: |
                tox -vv

    regenerate:
        if: ${{ (github.event_name == 'push' || (github.event_name == 'repository_dispatch' && github.event.action == 'rebuild')) && startsWith(github.ref, 'refs/heads/master') }}
        needs: [lint, test]
        runs-on: ubuntu-latest
        steps:
        -   uses: actions/checkout@v2
            if: github.event_name == 'repository_dispatch'
            with:
                ref: ${{ github.event.client_payload.ref }}
                token: ${{ secrets.REGENERATE_TOKEN }}
        -   uses: actions/checkout@v2
            if: github.event_name != 'repository_dispatch'
            with:
                ref: ${{ github.head_ref }}
                token: ${{ secrets.REGENERATE_TOKEN }}
        -   name: Get the current branch name
            id: branch
            run: |
                echo "::set-output name=branch_name::$(git branch --show-current)"

        -   name: Set up Python 3.9
            uses: actions/setup-python@v2
            with:
                python-version: 3.9

        -   name: Get pip cache dir
            id: pip-cache-dir
            run: |
                echo "::set-output name=dir::$(pip cache dir)"

        -   name: Restore pip cache
            uses: actions/cache@v2
            with:
                path: ${{ steps.pip-cache-dir.outputs.dir }}
                key: pip-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}

        -   name: Install dependencies
            run: |
                sudo apt install pandoc optipng
                python -m pip install --upgrade pip
                pip install tox tox-gh-actions

        -   name: Regenerate documentation
            run: |
                tox -e docs
            env:
                PLATFORM: ubuntu-latest

        -   name: Temporarily update .gitignore
            # git-auto-commit-action does not support `git add --force`
            run: |
                sed -i -E 's%docs/source/(auto_\*|gen_modules/)%%g' -- .gitignore
                git status -s -- add docs/source/auto_* docs/source/gen_modules/backreferences/*

        -   name: Commit changes
            uses: stefanzweifel/git-auto-commit-action@v4.8.0
            with:
                commit_message: '[auto][ci skip] Regenerate tutorials/examples'
                file_pattern: docs/source/auto_* docs/source/gen_modules/backreferences/*
                commit_user_name: CI
                skip_dirty_check: false
                skip_fetch: true

        -   name: Request documentation rebuild
            # if: steps.auto-commit-action.outputs.changes_detected == 'true'
            # does not seem to work with the above hack
            if: ${{ steps.branch.outputs.branch_name == 'master' }}
            run: |
                curl -X POST -d "branches=${{ steps.branch.outputs.branch_name }}" -d "token=${{ secrets.RTD_TOKEN }}" "${{ secrets.RTD_WEBHOOK }}"
