
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/graph/compute_spatial_neighbors.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_graph_compute_spatial_neighbors.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_graph_compute_spatial_neighbors.py:


Building spatial neighbors graph
--------------------------------

This example shows how to compute a spatial neighbors graph.

Spatial graph is a graph of spatial neighbors with observations as nodes
and neighbor-hood relations between observations as edges.
We use spatial coordinates of spots/cells to identify neighbors among them.
Different approach of defining a neighborhood relation among observations are used
for different types of spatial datasets.

.. GENERATED FROM PYTHON SOURCE LINES 14-20

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 21-22

First, we show how to compute the spatial neighbors graph for a Visium dataset.

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: default


    adata = sq.datasets.visium_fluo_adata()
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    AnnData object with n_obs × n_vars = 2800 × 16562
        obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_counts_MT', 'log1p_total_counts_MT', 'pct_counts_MT', 'n_counts', 'leiden', 'cluster'
        var: 'gene_ids', 'feature_types', 'genome', 'MT', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts', 'n_cells', 'highly_variable', 'highly_variable_rank', 'means', 'variances', 'variances_norm'
        uns: 'cluster_colors', 'hvg', 'leiden', 'leiden_colors', 'neighbors', 'pca', 'spatial', 'umap'
        obsm: 'X_pca', 'X_umap', 'spatial'
        varm: 'PCs'
        obsp: 'connectivities', 'distances'



.. GENERATED FROM PYTHON SOURCE LINES 27-33

We use :func:`squidpy.gr.spatial_neighbors` for this.
The function expects ``coord_type = 'visium'`` by default.
We set this parameter here explicitly for clarity.
``n_rings`` should be used only for Visium datasets.
It specifies for each spot how many hexagonal rings of spots around
will be considered neighbors.

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: default


    sq.gr.spatial_neighbors(adata, n_rings=2, coord_type="visium")








.. GENERATED FROM PYTHON SOURCE LINES 37-40

The function builds a spatial graph and saves its adjacency matrix
to ``adata.obsp['spatial_connectivities']`` and weighted adjacency matrix to
``adata.obsp['spatial_distances']`` by default.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default


    adata.obsp["spatial_connectivities"]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <2800x2800 sparse matrix of type '<class 'numpy.float64'>'
    	with 48240 stored elements in Compressed Sparse Row format>



.. GENERATED FROM PYTHON SOURCE LINES 44-47

For ``n_rings = 1`` there will be no ``adata.obsp['spatial_distances']``
The weights of the weighted adjacency matrix are ordinal numbers of hexagonal rings
in the case of ``coord_type = 'visium'``.

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default


    adata.obsp["spatial_distances"]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <2800x2800 sparse matrix of type '<class 'numpy.float64'>'
    	with 48240 stored elements in Compressed Sparse Row format>



.. GENERATED FROM PYTHON SOURCE LINES 51-52

We can visualize the neighbors of a point to better visualize what `n_rings` mean:

.. GENERATED FROM PYTHON SOURCE LINES 52-63

.. code-block:: default


    _, idx = adata.obsp["spatial_connectivities"][420, :].nonzero()
    idx = np.append(idx, 420)
    sc.pl.spatial(
        adata[idx, :],
        neighbors_key="spatial_neighbors",
        edges=True,
        edges_width=1,
        img_key=None,
    )




.. image:: /auto_examples/graph/images/sphx_glr_compute_spatial_neighbors_001.png
    :alt: compute spatial neighbors
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/pandas/core/arrays/categorical.py:2487: FutureWarning: The `inplace` parameter in pandas.Categorical.remove_unused_categories is deprecated and will be removed in a future version.
      res = method(*args, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 64-65

Next, we show how to compute the spatial neighbors graph for a non-Visium dataset.

.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: default


    adata = sq.datasets.imc()
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    AnnData object with n_obs × n_vars = 4668 × 34
        obs: 'cell type'
        uns: 'cell type_colors'
        obsm: 'spatial'



.. GENERATED FROM PYTHON SOURCE LINES 70-73

We use the same function for this with ``coord_type = 'generic'``.
``n_neigh`` and ``radius`` can be used for non-Visium datasets.
``n_neigh`` specifies a fixed number of the closest spots for each spot as neighbors.

.. GENERATED FROM PYTHON SOURCE LINES 73-87

.. code-block:: default


    sq.gr.spatial_neighbors(adata, n_neigh=10, coord_type="generic")
    _, idx = adata.obsp["spatial_connectivities"][420, :].nonzero()
    idx = np.append(idx, 420)
    sc.pl.spatial(
        adata[idx, :],
        color="cell type",
        neighbors_key="spatial_neighbors",
        spot_size=1,
        edges=True,
        edges_width=1,
        img_key=None,
    )




.. image:: /auto_examples/graph/images/sphx_glr_compute_spatial_neighbors_002.png
    :alt: cell type
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/pandas/core/arrays/categorical.py:2487: FutureWarning: The `inplace` parameter in pandas.Categorical.remove_unused_categories is deprecated and will be removed in a future version.
      res = method(*args, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 88-90

In order to get all spots within a specified radius (in units of the spatial coordinates)
from each spot as neighbors, the parameter ``radius`` should be used.

.. GENERATED FROM PYTHON SOURCE LINES 90-95

.. code-block:: default


    sq.gr.spatial_neighbors(adata, radius=0.3, coord_type="generic")

    adata.obsp["spatial_connectivities"]
    adata.obsp["spatial_distances"]




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <4668x4668 sparse matrix of type '<class 'numpy.float64'>'
    	with 0 stored elements in Compressed Sparse Row format>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.779 seconds)

**Estimated memory usage:**  234 MB


.. _sphx_glr_download_auto_examples_graph_compute_spatial_neighbors.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_spatial_neighbors.py <compute_spatial_neighbors.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_spatial_neighbors.ipynb <compute_spatial_neighbors.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
