
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/graph/compute_sepal.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/graph/compute_sepal.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_graph_compute_sepal.py:

Compute Sepal score
-------------------

This example shows how to compute the Sepal score for spatially variable genes identification.

The Sepal score is a method that simulates a diffusion process to quantify spatial structure in tissue.
See :cite:`andersson2021` for reference.

.. seealso::

    - See :ref:`sphx_glr_auto_examples_graph_compute_co_occurrence.py` and
      :ref:`sphx_glr_auto_examples_graph_compute_moran.py` for other scores to identify spatially variable genes.
    - See :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for general usage of
      :func:`squidpy.gr.spatial_neighbors`.

.. GENERATED FROM PYTHON SOURCE LINES 18-24

.. code-block:: default

    import scanpy as sc
    import squidpy as sq

    adata = sq.datasets.visium_hne_adata()
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    AnnData object with n_obs × n_vars = 2688 × 18078
        obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_counts_mt', 'log1p_total_counts_mt', 'pct_counts_mt', 'n_counts', 'leiden', 'cluster'
        var: 'gene_ids', 'feature_types', 'genome', 'mt', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts', 'n_cells', 'highly_variable', 'highly_variable_rank', 'means', 'variances', 'variances_norm'
        uns: 'cluster_colors', 'hvg', 'leiden', 'leiden_colors', 'neighbors', 'pca', 'rank_genes_groups', 'spatial', 'umap'
        obsm: 'X_pca', 'X_umap', 'spatial'
        varm: 'PCs'
        obsp: 'connectivities', 'distances'



.. GENERATED FROM PYTHON SOURCE LINES 25-41

We can compute the Sepal score with :func:`squidpy.gr.sepal`.
there are 2 important aspects to consider when computing sepal:

- The function only accepts grid-like spatial graphs. Make sure to specify the
  maximum number of neighbors in your data (6 for an hexagonal grid like Visium)
  with ``max_neighs = 6``.
- It is useful to filter out genes that are expressed in very few observations
  and might be wrongly identified as being spatially variable. If you are performing
  pre-processing with Scanpy, there is a convenient function that can be used BEFORE
  normalization :func:`scanpy.pp.calculate_qc_metrics`. It computes several useful
  summary statistics on both observation and feature axis. We will be using the
  ``n_cells`` columns in `adata.var` to filter out genes that are expressed in
  less than 100 observations.

Before computing the Sepal score, we first need to compute a spatial graph with :func:`squidpy.gr.spatial_neighbors`.
We will also subset the number of genes to evaluate for efficiency purposes.

.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: default

    sq.gr.spatial_neighbors(adata)
    genes = adata.var_names[(adata.var.n_cells > 100) & adata.var.highly_variable][0:100]
    sq.gr.sepal(adata, max_neighs=6, genes=genes, n_jobs=1)
    adata.uns["sepal_score"].head(10)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/100 [00:00<?, ?/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>sepal_score</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Lct</th>
          <td>7.868</td>
        </tr>
        <tr>
          <th>1500015O10Rik</th>
          <td>7.085</td>
        </tr>
        <tr>
          <th>Ecel1</th>
          <td>5.274</td>
        </tr>
        <tr>
          <th>Fzd5</th>
          <td>4.694</td>
        </tr>
        <tr>
          <th>Cfap65</th>
          <td>4.095</td>
        </tr>
        <tr>
          <th>C1ql2</th>
          <td>3.144</td>
        </tr>
        <tr>
          <th>Slc9a2</th>
          <td>2.947</td>
        </tr>
        <tr>
          <th>Gm17634</th>
          <td>2.904</td>
        </tr>
        <tr>
          <th>St18</th>
          <td>2.568</td>
        </tr>
        <tr>
          <th>Des</th>
          <td>2.494</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 47-48

We can visualize some of those genes with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 48-49

.. code-block:: default

    sc.pl.spatial(adata, color=["Lct", "Ecel1", "Cfap65"])



.. image:: /auto_examples/graph/images/sphx_glr_compute_sepal_001.png
    :alt: Lct, Ecel1, Cfap65
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  47.519 seconds)

**Estimated memory usage:**  392 MB


.. _sphx_glr_download_auto_examples_graph_compute_sepal.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_sepal.py <compute_sepal.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_sepal.ipynb <compute_sepal.ipynb>`
