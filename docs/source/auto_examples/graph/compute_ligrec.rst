
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/graph/compute_ligrec.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/graph/compute_ligrec.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_graph_compute_ligrec.py:

Receptor-ligand analysis
------------------------

This example shows how to run the receptor-ligand analysis.

It uses an efficient re-implementation of the :cite:`cellphonedb` algorithm which can handle large number of interacting
pairs (100k+) and cluster combinations (100+).

.. seealso::

    See :ref:`sphx_glr_auto_examples_graph_compute_nhood_enrichment.py` for
    finding cluster neighborhood with :func:`squidpy.gr.nhood_enrichment`.

.. GENERATED FROM PYTHON SOURCE LINES 16-21

.. code-block:: default

    import squidpy as sq

    adata = sq.datasets.seqfish()
    adata


.. GENERATED FROM PYTHON SOURCE LINES 22-37

To get started, we just need an :class:`anndata.AnnData` object with some clustering information. Below are some
useful parameters of :func:`squidpy.gr.ligrec`:

- ``n_perms`` - number of permutations for the permutation test.
- ``interactions`` - list of interaction, by default we fetch all available interactions from :cite:`omnipath`.
- ``{interactions,transmitter,receiver}_params`` - parameters used if downloading the ``interactions``,
  see :func:`omnipah.interactions.import_intercell_network` for more information.
- ``threshold`` - percentage of cells required to be expressed in a given cluster.
- ``corr_method`` - false discovery rate (FDR) correction method to use.

Since we're interested in receptors and ligands in this example, we specify these categories in ``receiver_params``
and ``transmitter_params``, respectively.
If desired, we can also restrict the resources to just a select few. For example, in order to only use
:cite:`cellphonedb`, set ``interactions_params={'resources': 'CellPhoneDB'}``.


.. GENERATED FROM PYTHON SOURCE LINES 37-47

.. code-block:: default

    res = sq.gr.ligrec(
        adata,
        n_perms=1000,
        cluster_key="celltype_mapped_refined",
        copy=True,
        use_raw=False,
        transmitter_params={"categories": "ligand"},
        receiver_params={"categories": "receptor"},
    )


.. GENERATED FROM PYTHON SOURCE LINES 48-50

First, we inspect the calculated means. The resulting object is a :class:`pandas.DataFrame`, with rows corresponding
to interacting pairs and columns to cluster combinations.

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: default

    res["means"].head()


.. GENERATED FROM PYTHON SOURCE LINES 53-56

Next, we take a look at the p-values. If ``corr_method != None``, this will contained the corrected p-values.
The p-values marked as `NaN` correspond to interactions, which did not pass the filtering ``threshold`` specified
above.

.. GENERATED FROM PYTHON SOURCE LINES 56-58

.. code-block:: default

    res["pvalues"].head()


.. GENERATED FROM PYTHON SOURCE LINES 59-60

Any interaction metadata downloaded from :mod:`omnipath`, such as the interaction type, can be accessed as:

.. GENERATED FROM PYTHON SOURCE LINES 60-62

.. code-block:: default

    res["metadata"].head()


.. GENERATED FROM PYTHON SOURCE LINES 63-71

In order to plot the results, we can run :func:`squidpy.pl.ligrec`. Some useful parameters are:

- ``{source,target}_groups`` - only plot specific source/target clusters.
- ``dendrogram`` - whether to hierarchically cluster the rows, columns or both.
- ``mean_range`` - plot only interactions whose means are in this range.
- ``pval_threshold`` - plot only interactions whose p-values are below this threshold.

In the plot below, to highlight significance, we've marked all p-values <= 0.005 with tori.

.. GENERATED FROM PYTHON SOURCE LINES 71-72

.. code-block:: default

    sq.pl.ligrec(res, source_groups="Erythroid", alpha=0.005)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_graph_compute_ligrec.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_ligrec.py <compute_ligrec.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_ligrec.ipynb <compute_ligrec.ipynb>`
