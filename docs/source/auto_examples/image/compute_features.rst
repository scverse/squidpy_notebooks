
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_features.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_features.py:

Extract image features
----------------------

This example shows the computation of spot-wise features from Visium images.

Visium datasets contain high-resolution images of the tissue in addition to the spatial gene expression
measurements per spot (*obs*).
In this notebook, we extract features for each spot from an image using :func:`squidpy.im.calculate_image_features`
and create a **obs x features** matrix that can be analyzed together with
the **obs x genes** spatial gene expression matrix.

.. seealso::

    We provide different feature extractors that are described in more detail in the following examples:

    - See :ref:`sphx_glr_auto_examples_image_compute_summary_features.py` on how to calculate summary statistics
      of each color channel.
    - See :ref:`sphx_glr_auto_examples_image_compute_texture_features.py` on how to calculate texture features based
      on repeating patterns.
    - See :ref:`sphx_glr_auto_examples_image_compute_histogram_features.py` on how to calculate
      color histogram features.
    - See :ref:`sphx_glr_auto_examples_image_compute_segmentation_features.py` on how to calculate
      number and size of objects from a binary segmentation layer.
    - See :ref:`sphx_glr_auto_examples_image_compute_custom_features.py` on how to calculate custom features
      by providing any feature extraction function.

.. GENERATED FROM PYTHON SOURCE LINES 29-41

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    import numpy as np

    import seaborn as sns

    # get spatial dataset including high-resolution tissue image
    img = sq.datasets.visium_hne_image_crop()
    adata = sq.datasets.visium_hne_adata_crop()


.. GENERATED FROM PYTHON SOURCE LINES 42-45

The high-resolution tissue image is contained in ``img['image']``,
and the spot locations coordinates are stored in ``adata.obsm['spatial']``.
We can plot the spots overlayed on a lower-resolution version of the tissue image contained in ``adata``.

.. GENERATED FROM PYTHON SOURCE LINES 45-53

.. code-block:: default


    np.set_printoptions(threshold=10)
    print(img)
    print(adata.obsm["spatial"])

    sc.set_figure_params(figsize=(4, 4))
    sc.pl.spatial(adata, add_outline=True)


.. GENERATED FROM PYTHON SOURCE LINES 54-68

Using this information, we can now extract features from the tissue underneath each spot by calling
:func:`squidpy.im.calculate_image_features`.
This function takes both ``adata`` and ``img`` as input, and will write the resulting ``obs x features`` matrix to
``adata.obsm[key]``.
It contains several arguments to modify its behavior.
With these arguments you can

- specify the image used for feature calculation using ``layer``,
- specify the type of features that should be calculated using ``features`` and ``features_kwargs``,
- specify how the crops used for feature calculation look like using ``kwargs``,
- specify parallelization options using ``n_jobs``, ``backend``, and ``show_progress_bar``,
- specify how the data is returned using ``key_added`` and ``copy``.

Let us first calculate summary features and save the result in ``adata.obsm['features']``.

.. GENERATED FROM PYTHON SOURCE LINES 68-74

.. code-block:: default


    sq.im.calculate_image_features(adata, img, features="summary", key_added="features", show_progress_bar=False)

    # show the calculated features
    adata.obsm["features"].head()


.. GENERATED FROM PYTHON SOURCE LINES 75-79

To visualize the features, we can use :func:`squidpy.pl.extract` to plot the texture features on the tissue image.

Here, we plot the median values of all channels (`summary_ch-0_quantile-0.5`,
`summary_ch-0_quantile-0.5`, and `summary_ch-2_quantile-0.5`).

.. GENERATED FROM PYTHON SOURCE LINES 79-85

.. code-block:: default


    sc.pl.spatial(
        sq.pl.extract(adata, "features"),
        color=["summary_ch-0_quantile-0.5", "summary_ch-0_quantile-0.5", "summary_ch-2_quantile-0.5"],
    )


.. GENERATED FROM PYTHON SOURCE LINES 86-102

Specify crop appearance
=======================
Features are extracted from image crops that capture the Visium spots
(see also :ref:`sphx_glr_auto_examples_image_compute_crops.py`).
By default, the crops have the same size as the spot, are not scaled and square.
We can use the ``mask_circle`` argument to mask a circle and ensure that only tissue underneath the round
Visium spots is taken into account to compute the features.
Further, we can set ``scale`` and ``spot_scale`` arguments to change how the crops are generated.
For more details on the crop computation, see also :ref:`sphx_glr_auto_examples_image_compute_crops.py`.

- Use ``mask_circle=True, scale=1, spot_scale=1``, if you would like to get features that are calculated only from
  tissue in a Visium spot
- Use ``scale=X``, with `X < 1`, if you would like to downscale the crop before extracting the features
- Use ``spot_scale=X``, with `X > 1`, if you would like to extract crops that are X-times the size of the Visium spot

Let us extract masked and scaled features and compare them

.. GENERATED FROM PYTHON SOURCE LINES 102-142

.. code-block:: default


    # We subset adata to the first 50 spots to make the computation of features fast.
    # Skip this step if you want to calculate features from all spots
    adata_sml = adata[:50].copy()

    # calculate default features
    sq.im.calculate_image_features(
        adata_sml, img, features=["summary", "texture", "histogram"], key_added="features", show_progress_bar=False
    )
    # calculate features with masking
    sq.im.calculate_image_features(
        adata_sml,
        img,
        features=["summary", "texture", "histogram"],
        key_added="features_masked",
        mask_circle=True,
        show_progress_bar=False,
    )
    # calculate features with scaling and larger context
    sq.im.calculate_image_features(
        adata_sml,
        img,
        features=["summary", "texture", "histogram"],
        key_added="features_scaled",
        mask_circle=True,
        spot_scale=2,
        scale=0.5,
        show_progress_bar=False,
    )

    # plot distribution of median for different cropping options
    _ = sns.displot(
        {
            "features": adata_sml.obsm["features"]["summary_ch-0_quantile-0.5"],
            "features_masked": adata_sml.obsm["features_masked"]["summary_ch-0_quantile-0.5"],
            "features_scaled": adata_sml.obsm["features_scaled"]["summary_ch-0_quantile-0.5"],
        },
        kind="kde",
    )


.. GENERATED FROM PYTHON SOURCE LINES 143-144

The masked features have lower median values, because the area outside the circle is masked with zeros.

.. GENERATED FROM PYTHON SOURCE LINES 146-151

Parallelization
===============
Speeding up the feature extraction is easy.
Just set the ``n_jobs`` flag to the number of jobs that should be used by :func:`squidpy.im.calculate_image_features`.
extract features by using 4 jobs

.. GENERATED FROM PYTHON SOURCE LINES 151-152

.. code-block:: default

    sq.im.calculate_image_features(adata, img, features="summary", key_added="features", n_jobs=4, show_progress_bar=False)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_image_compute_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_features.py <compute_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_features.ipynb <compute_features.ipynb>`
