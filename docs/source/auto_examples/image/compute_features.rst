
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_image_compute_features.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_features.py:


Extract Image Features
----------------------
In addition to the spatial gene expression values, visium datasets also contain high-resolution images of the tissue.
In this notebook we extract features from this image using :func:`squidpy.im.calculate_image_features`
and create a ``obs x features`` matrix that can be analysed together with
the ``obs x genes`` spatial gene expression matrix.

To compute features for each visium spot (``obs``), we extract image crops from the tissue image centered on each spot.
When extracting the crops, we can specify the size and scale of the crops and optionally mask a circle
to ensure that only tissue underneath the round visium spots is taken into account to compute the features.
See also :ref:`sphx_glr_auto_examples_image_compute_crops.py`.

The extracted crops are then used to compute features.
We provide different feature extractors that are described in more detail in the following examples:
- summary statistics of each color channel
  (:ref:`sphx_glr_auto_examples_image_compute_summary_features.py`)
- texture features based on repeating patterns
  (:ref:`sphx_glr_auto_examples_image_compute_texture_features.py`)
- color histogram features using counts in bins of each channel's histogram
  (:ref:`sphx_glr_auto_examples_image_compute_histogram_features.py`)
- number and size of objects from a binary segmentation layer
  (:ref:`sphx_glr_auto_examples_image_compute_segmentation_features.py`)

.. GENERATED FROM PYTHON SOURCE LINES 26-42

.. code-block:: default

    # import modules
    import os

    import squidpy as sq

    import scanpy as sc

    import numpy as np

    import seaborn as sns
    import matplotlib.pyplot as plt

    # get spatial dataset including hires tissue image
    img = sq.im.ImageContainer(os.path.expanduser("~/.cache/squidpy/tutorial_data/visium_hne_crop.tiff"))
    adata = sc.read(os.path.expanduser("~/.cache/squidpy/tutorial_data/visium_hne_crop.h5ad"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/rasterio/__init__.py:221: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.
      s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 43-46

The high resolution tissue image is contained in ``img['image']``,
and the spot locations in tissue image pixel-space are located in ``adata.obsm['spatial']``.
We can plot the spots overlayed on a lower-resolution version of the tissue image contained in adata.

.. GENERATED FROM PYTHON SOURCE LINES 46-53

.. code-block:: default


    np.set_printoptions(threshold=10)
    print(img)
    print(adata.obsm["spatial"])

    sc.pl.spatial(adata, add_outline=True)




.. image:: /auto_examples/image/images/sphx_glr_compute_features_001.png
    :alt: compute features
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ImageContainer object with 1 layer(s)
        image: y (3527), x (3527), channels (3)

    [[1575   98]
     [2538 1774]
     [1850   98]
     ...
     [2263 1534]
     [2401 1055]
     [2676 1774]]




.. GENERATED FROM PYTHON SOURCE LINES 54-67

Using this information, we can now extract features from the tissue underneath each spot by calling
:func:`squidpy.im.calculate_image_features`.
This function takes both `adata` and `img` as input, and will write the resulting ``obs x features`` matrix to
``adata.obsm[key]``.
It contains several arguments to modify its behaviour.
With these arguments you can
- specify the image used for feature calculation using ``img_id``,
- specify the type of features that should be calculated using ``features`` and ``features_kwargs``,
- specify how the crops used for feature calculation look like using ``kwargs``,
- specify parallelization options using ``n_jobs``, ``backend``, ``show_progress_bar``, and
- specify how the data that is returned using ``key_added``, ``copy``.

Let us first calculate summary features and save the result in ``adata.obsm['features']``.

.. GENERATED FROM PYTHON SOURCE LINES 67-74

.. code-block:: default


    sq.im.calculate_image_features(adata, img, features="summary", key_added="features")

    # show the calculated features
    print(f"calculated features: {list(adata.obsm['features'].columns)}")
    print(adata.obsm["features"].head())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    calculated features: ['summary_quantile_0.9_ch_0', 'summary_quantile_0.5_ch_0', 'summary_quantile_0.1_ch_0', 'summary_quantile_0.9_ch_1', 'summary_quantile_0.5_ch_1', 'summary_quantile_0.1_ch_1', 'summary_quantile_0.9_ch_2', 'summary_quantile_0.5_ch_2', 'summary_quantile_0.1_ch_2']
                        summary_quantile_0.9_ch_0  summary_quantile_0.5_ch_0  ...  summary_quantile_0.5_ch_2  summary_quantile_0.1_ch_2
    AAAGACCCAAGTCGCG-1                      140.0                      112.0  ...                      115.0                       90.0
    AAAGGGATGTAGCAAG-1                      144.0                      114.0  ...                      111.0                       88.0
    AAAGTCACTGATGTAA-1                      139.0                      115.0  ...                      118.0                       93.0
    AAATGGCATGTCTTGT-1                      138.0                      109.0  ...                      111.0                       85.0
    AAATGGTCAATGTGCC-1                      146.0                      113.0  ...                      113.0                       89.0

    [5 rows x 9 columns]




.. GENERATED FROM PYTHON SOURCE LINES 75-79

To visualize the features, we can use :func:`squidpy.pl.extract` to plot the texture features on the tissue image.
See :ref:`sphx_glr_auto_examples_plotting_compute_extract.py` for more details on this function.

Here, we plot the median value of channel 0 (``summary_quantile_0.5_ch_0``).

.. GENERATED FROM PYTHON SOURCE LINES 79-83

.. code-block:: default


    sc.set_figure_params(facecolor="white", figsize=(8, 8))
    sc.pl.spatial(sq.pl.extract(adata, "features"), color=[None, "summary_quantile_0.5_ch_0"])




.. image:: /auto_examples/image/images/sphx_glr_compute_features_002.png
    :alt: summary_quantile_0.5_ch_0
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-87

## Speed up feature extraction
Speeding up the feature extraction is easy.
Just set the ``n_jobs`` flag to the number of jobs that should be used by :func:`squidpy.im.calculate_image_features`.

.. GENERATED FROM PYTHON SOURCE LINES 87-91

.. code-block:: default


    # extract features by using 4 jobs
    sq.im.calculate_image_features(adata, img, features="summary", key_added="features", n_jobs=4)








.. GENERATED FROM PYTHON SOURCE LINES 92-104

## Specify crop appearance
Features are extracted from image crops that are centered on the visium spots
(see also :ref:`sphx_glr_auto_examples_image_compute_crops.py`).
By default, the crops have the same size as the spot, are not scaled and not masked.
We can use the `mask_circle`, `scale`, and `size` arguments to change how the crops are generated.

- Use `mask_circle=True, scale=1, size=1`, if you would like to get features that are calculated only from tissue
  in a visium spot
- Use `scale=X`, with `X < 1`, if you would like to downscale the crop before extracting the features
- Use `size=X`, with `X > 1`, if you would like to extract crops that are X-times the size of the visium spot

Let us extract masked and scaled features and compare them

.. GENERATED FROM PYTHON SOURCE LINES 104-132

.. code-block:: default


    # We subset adata to the first 50 spots to make the computation of features fast.
    # Skip this step if you want to calculate features from all spots
    adata_sml = adata[0:50].copy()

    # calculate default features
    sq.im.calculate_image_features(adata_sml, img, features=["summary", "texture", "histogram"], key_added="features")
    # calculate features with masking
    sq.im.calculate_image_features(
        adata_sml, img, features=["summary", "texture", "histogram"], key_added="features_masked", mask_circle=True
    )
    # calculate features with scaling and larger context
    sq.im.calculate_image_features(
        adata_sml,
        img,
        features=["summary", "texture", "histogram"],
        key_added="features_scaled",
        mask_circle=True,
        size=2,
        scale=0.5,
    )

    # plot distribution of median for different cropping options
    sns.distplot(adata_sml.obsm["features"]["summary_quantile_0.5_ch_0"], label="features")
    sns.distplot(adata_sml.obsm["features_masked"]["summary_quantile_0.5_ch_0"], label="features_masked")
    sns.distplot(adata_sml.obsm["features_scaled"]["summary_quantile_0.5_ch_0"], label="features_scaled")
    _ = plt.legend()




.. image:: /auto_examples/image/images/sphx_glr_compute_features_003.png
    :alt: compute features
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/pandas/core/arrays/categorical.py:2487: FutureWarning: The `inplace` parameter in pandas.Categorical.remove_unused_categories is deprecated and will be removed in a future version.
      res = method(*args, **kwargs)
    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).
      warnings.warn(msg, FutureWarning)
    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).
      warnings.warn(msg, FutureWarning)
    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).
      warnings.warn(msg, FutureWarning)




.. GENERATED FROM PYTHON SOURCE LINES 133-134

The masked features have lower median values, because the area outside the circle is masked with zeros.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  41.068 seconds)

**Estimated memory usage:**  284 MB


.. _sphx_glr_download_auto_examples_image_compute_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_features.py <compute_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_features.ipynb <compute_features.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
