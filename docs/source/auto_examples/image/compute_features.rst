
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_image_compute_features.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_features.py:


Extract Image Features
======================
This example explains the computation of spot-wise features from visium images.

Visium datasets contain high-resolution images of the tissue in addition to the spatial gene expression
measurements per spot (`obs`).
In this notebook, we extract features for each spot from an image using :func:`squidpy.im.calculate_image_features`
and create a ``obs x features`` matrix that can be analysed together with
the ``obs x genes`` spatial gene expression matrix.

We provide different feature extractors that are described in more detail in the following examples:

- summary statistics of each color channel
  (:ref:`sphx_glr_auto_examples_image_compute_summary_features.py`)
- texture features based on repeating patterns
  (:ref:`sphx_glr_auto_examples_image_compute_texture_features.py`)
- color histogram features using counts in bins of each channel's histogram
  (:ref:`sphx_glr_auto_examples_image_compute_histogram_features.py`)
- number and size of objects from a binary segmentation layer
  (:ref:`sphx_glr_auto_examples_image_compute_segmentation_features.py`)

.. GENERATED FROM PYTHON SOURCE LINES 24-36

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    import numpy as np

    import seaborn as sns

    # get spatial dataset including high-resolution tissue image
    img = sq.datasets.visium_hne_image_crop()
    adata = sq.datasets.visium_hne_adata_crop()








.. GENERATED FROM PYTHON SOURCE LINES 38-41

The high-resolution tissue image is contained in ``img['image']``,
and the spot locations coordinates are stored in ``adata.obsm['spatial']``.
We can plot the spots overlayed on a lower-resolution version of the tissue image contained in adata.

.. GENERATED FROM PYTHON SOURCE LINES 41-49

.. code-block:: default


    np.set_printoptions(threshold=10)
    print(img)
    print(adata.obsm["spatial"])

    sc.set_figure_params(figsize=(4, 4))
    sc.pl.spatial(adata, add_outline=True)




.. image:: /auto_examples/image/images/sphx_glr_compute_features_001.png
    :alt: compute features
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ImageContainer object with 1 layer(s)
        image: y (3527), x (3527), channels (3)

    [[1575   98]
     [2538 1774]
     [1850   98]
     ...
     [2263 1534]
     [2401 1055]
     [2676 1774]]




.. GENERATED FROM PYTHON SOURCE LINES 50-64

Using this information, we can now extract features from the tissue underneath each spot by calling
:func:`squidpy.im.calculate_image_features`.
This function takes both ``adata`` and ``img`` as input, and will write the resulting ``obs x features`` matrix to
``adata.obsm[key]``.
It contains several arguments to modify its behaviour.
With these arguments you can

- specify the image used for feature calculation using ``img_id``,
- specify the type of features that should be calculated using ``features`` and ``features_kwargs``,
- specify how the crops used for feature calculation look like using ``kwargs``,
- specify parallelization options using ``n_jobs``, ``backend``, and ``show_progress_bar``,
- specify how the data that is returned using ``key_added`` and ``copy``.

Let us first calculate summary features and save the result in ``adata.obsm['features']``.

.. GENERATED FROM PYTHON SOURCE LINES 64-71

.. code-block:: default


    sq.im.calculate_image_features(adata, img, features="summary", key_added="features")

    # show the calculated features
    print(f"calculated features: {list(adata.obsm['features'].columns)}")
    adata.obsm["features"].head()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    calculated features: ['summary_quantile_0.9_ch_0', 'summary_quantile_0.5_ch_0', 'summary_quantile_0.1_ch_0', 'summary_quantile_0.9_ch_1', 'summary_quantile_0.5_ch_1', 'summary_quantile_0.1_ch_1', 'summary_quantile_0.9_ch_2', 'summary_quantile_0.5_ch_2', 'summary_quantile_0.1_ch_2']


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>summary_quantile_0.9_ch_0</th>
          <th>summary_quantile_0.5_ch_0</th>
          <th>summary_quantile_0.1_ch_0</th>
          <th>summary_quantile_0.9_ch_1</th>
          <th>summary_quantile_0.5_ch_1</th>
          <th>summary_quantile_0.1_ch_1</th>
          <th>summary_quantile_0.9_ch_2</th>
          <th>summary_quantile_0.5_ch_2</th>
          <th>summary_quantile_0.1_ch_2</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>AAAGACCCAAGTCGCG-1</th>
          <td>140.0</td>
          <td>112.0</td>
          <td>78.0</td>
          <td>108.0</td>
          <td>80.0</td>
          <td>53.0</td>
          <td>140.0</td>
          <td>115.0</td>
          <td>90.0</td>
        </tr>
        <tr>
          <th>AAAGGGATGTAGCAAG-1</th>
          <td>144.0</td>
          <td>114.0</td>
          <td>90.0</td>
          <td>107.0</td>
          <td>77.0</td>
          <td>56.0</td>
          <td>142.0</td>
          <td>111.0</td>
          <td>88.0</td>
        </tr>
        <tr>
          <th>AAAGTCACTGATGTAA-1</th>
          <td>139.0</td>
          <td>115.0</td>
          <td>84.0</td>
          <td>121.0</td>
          <td>94.0</td>
          <td>66.0</td>
          <td>141.0</td>
          <td>118.0</td>
          <td>93.0</td>
        </tr>
        <tr>
          <th>AAATGGCATGTCTTGT-1</th>
          <td>138.0</td>
          <td>109.0</td>
          <td>74.0</td>
          <td>101.0</td>
          <td>71.0</td>
          <td>45.0</td>
          <td>142.0</td>
          <td>111.0</td>
          <td>85.0</td>
        </tr>
        <tr>
          <th>AAATGGTCAATGTGCC-1</th>
          <td>146.0</td>
          <td>113.0</td>
          <td>84.0</td>
          <td>112.0</td>
          <td>77.0</td>
          <td>53.0</td>
          <td>144.0</td>
          <td>113.0</td>
          <td>89.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 72-77

To visualize the features, we can use :func:`squidpy.pl.extract` to plot the texture features on the tissue image.
See :ref:`sphx_glr_auto_examples_plotting_compute_extract.py` for more details on this function.

Here, we plot the median values of all channels (`summary_quantile_0.5_ch_0`, `summary_quantile_0.5_ch_1` and
`summary_quantile_0.5_ch_2`).

.. GENERATED FROM PYTHON SOURCE LINES 77-83

.. code-block:: default


    sc.pl.spatial(
        sq.pl.extract(adata, "features"),
        color=["summary_quantile_0.5_ch_0", "summary_quantile_0.5_ch_1", "summary_quantile_0.5_ch_2"],
    )




.. image:: /auto_examples/image/images/sphx_glr_compute_features_002.png
    :alt: summary_quantile_0.5_ch_0, summary_quantile_0.5_ch_1, summary_quantile_0.5_ch_2
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-100

Specify crop appearance
-----------------------
Features are extracted from image crops that capture the visium spots
(see also :ref:`sphx_glr_auto_examples_image_compute_crops.py`).
By default, the crops have the same size as the spot, are not scaled and square.
We can use the ``mask_circle`` argument to mask a circle and ensure that only tissue underneath the round
visium spots is taken into account to compute the features.
Further, we can set ``scale`` and ``size`` arguments to change how the crops are generated.
For more details on the crop computation, see also :ref:`sphx_glr_auto_examples_image_compute_crops.py`.

- Use ``mask_circle=True, scale=1, size=1``, if you would like to get features that are calculated only from tissue
  in a visium spot
- Use ``scale=X``, with `X < 1`, if you would like to downscale the crop before extracting the features
- Use ``size=X``, with `X > 1`, if you would like to extract crops that are X-times the size of the visium spot

Let us extract masked and scaled features and compare them

.. GENERATED FROM PYTHON SOURCE LINES 100-132

.. code-block:: default


    # We subset adata to the first 50 spots to make the computation of features fast.
    # Skip this step if you want to calculate features from all spots
    adata_sml = adata[0:50].copy()

    # calculate default features
    sq.im.calculate_image_features(adata_sml, img, features=["summary", "texture", "histogram"], key_added="features")
    # calculate features with masking
    sq.im.calculate_image_features(
        adata_sml, img, features=["summary", "texture", "histogram"], key_added="features_masked", mask_circle=True
    )
    # calculate features with scaling and larger context
    sq.im.calculate_image_features(
        adata_sml,
        img,
        features=["summary", "texture", "histogram"],
        key_added="features_scaled",
        mask_circle=True,
        size=2,
        scale=0.5,
    )

    # plot distribution of median for different cropping options
    _ = sns.displot(
        {
            "features": adata_sml.obsm["features"]["summary_quantile_0.5_ch_0"],
            "features_masked": adata_sml.obsm["features_masked"]["summary_quantile_0.5_ch_0"],
            "features_scaled": adata_sml.obsm["features_scaled"]["summary_quantile_0.5_ch_0"],
        },
        kind="kde",
    )




.. image:: /auto_examples/image/images/sphx_glr_compute_features_003.png
    :alt: compute features
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/pandas/core/arrays/categorical.py:2487: FutureWarning: The `inplace` parameter in pandas.Categorical.remove_unused_categories is deprecated and will be removed in a future version.
      res = method(*args, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 133-134

The masked features have lower median values, because the area outside the circle is masked with zeros.

.. GENERATED FROM PYTHON SOURCE LINES 136-141

Parallelisation
---------------
Speeding up the feature extraction is easy.
Just set the ``n_jobs`` flag to the number of jobs that should be used by :func:`squidpy.im.calculate_image_features`.
extract features by using 4 jobs

.. GENERATED FROM PYTHON SOURCE LINES 141-142

.. code-block:: default

    sq.im.calculate_image_features(adata, img, features="summary", key_added="features", n_jobs=4)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  42.801 seconds)

**Estimated memory usage:**  290 MB


.. _sphx_glr_download_auto_examples_image_compute_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_features.py <compute_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_features.ipynb <compute_features.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
