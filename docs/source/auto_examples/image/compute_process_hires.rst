
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_process_hires.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_image_compute_process_hires.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_process_hires.py:


Processing a high-resolution Image
----------------------------------

This example shows how to use :func:`squidpy.im.process_img` to apply any processing function
(smoothing, conversion to grayscale) to a high-resolution image layer of :class:`squidpy.im.ImageContainer`.

By default, :func:`squidpy.im.process_img`` processes the entire input image at once.
In the case of high-resolution tissue slides however, the images might bo too big to fit in memory
and cannot be processed at once.
In that case you can use the arguments ``xs`` and ``ys`` that will tile the image in crops of size ``(ys, xs)``,
process each crop, and re-assemble the resulting image.
Note that you can also use :func:`squidpy.im.segment_img` in this manner.

Note that depending on the processing function used, there might be border effects occurring at the edges
of the crops. In a future version, we will support the extraction of overlapping crops,
which can mitigate these effects.

For more usage examples see also   :ref:`sphx_glr_auto_examples_image_compute_smooth.py`,
:ref:`sphx_glr_auto_examples_image_compute_gray.py`, and
:ref:`sphx_glr_auto_examples_image_compute_segment_fluo.py`.

.. GENERATED FROM PYTHON SOURCE LINES 23-34

.. code-block:: default


    import os

    import squidpy as sq

    import matplotlib.pyplot as plt

    # get H&E stained tissue image.
    img = sq.im.ImageContainer(os.path.expanduser("~/.cache/squidpy/tutorial_data/visium_hne.tiff"))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/rasterio/__init__.py:221: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.
      s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 35-36

First, we crop a smaller image to process

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: default

    crop = img.crop_corner(4000, 4000, 2000, 2000)








.. GENERATED FROM PYTHON SOURCE LINES 39-40

We will process the image by tiling it in crops of shape ``(ys, xs) = (1000,1000)``.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default


    sq.im.process_img(crop, img_id="image", processing="gray", xs=1000, ys=1000)








.. GENERATED FROM PYTHON SOURCE LINES 44-45

Now we can plot the result

.. GENERATED FROM PYTHON SOURCE LINES 45-50

.. code-block:: default

    fig, axes = plt.subplots(1, 2)
    axes[0].imshow(crop["image"])
    axes[1].imshow(crop["image_gray"], cmap="gray")
    for ax in axes:
        ax.axis("off")



.. image:: /auto_examples/image/images/sphx_glr_compute_process_hires_001.png
    :alt: compute process hires
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  18.652 seconds)

**Estimated memory usage:**  1142 MB


.. _sphx_glr_download_auto_examples_image_compute_process_hires.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_process_hires.py <compute_process_hires.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_process_hires.ipynb <compute_process_hires.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
