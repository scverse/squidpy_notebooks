
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_process_hires.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_process_hires.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_process_hires.py:

Process a high-resolution image
-------------------------------

This example shows how to use :func:`squidpy.im.process` with tiling.

The function can be applied to any method (e.g., smoothing, conversion to grayscale)
or ``layer`` of a high-resolution image layer of :class:`squidpy.im.ImageContainer`.

By default, :func:`squidpy.im.process` processes the entire input image at once.
In the case of high-resolution tissue slides however, the images might be too big to fit in memory
and cannot be processed at once.
In that case you can use the argument ``chunks`` to tile the image in crops of shape ``chunks``,
process each crop, and re-assemble the resulting image.
Note that you can also use :func:`squidpy.im.segment` in this manner.

Note that depending on the processing function used, there might be border effects occurring at the edges
of the crops.
Since Squidpy is backed by :mod:`dask`, and internally chunking is done using :func:`dask.array.map_overlap`,
dealing with these border effects is easy.
Just specify the ``depth`` and ``boundary`` arguments in the ``apply_kwargs``
upon the call to :func:`squidpy.im.process`.
For more information, please refer to the documentation of :func:`dask.array.map_overlap`.

For the build in processing functions, `gray` and `smooth`, the border effects are already automatically
taken care of, so it is not necessary to specify ``depth`` and ``boundary``.
For :func:`squidpy.im.segment`, the default ``depth`` is 30, which already takes care of most severe
border effects.

.. seealso::

    - :ref:`sphx_glr_auto_examples_image_compute_smooth.py`.
    - :ref:`sphx_glr_auto_examples_image_compute_gray.py`.
    - :ref:`sphx_glr_auto_examples_image_compute_segment_fluo.py`.

.. GENERATED FROM PYTHON SOURCE LINES 37-45

.. code-block:: default


    import squidpy as sq

    from scipy.ndimage import gaussian_filter
    import numpy as np

    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 46-48

Built-in processing functions
+++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: default


    # load the H&E stained tissue image
    img = sq.datasets.visium_hne_image()








.. GENERATED FROM PYTHON SOURCE LINES 53-54

We will process the image by tiling it in crops of shape ``chunks = (1000, 1000)``.

.. GENERATED FROM PYTHON SOURCE LINES 54-56

.. code-block:: default

    sq.im.process(img, layer="image", method="gray", chunks=1000)








.. GENERATED FROM PYTHON SOURCE LINES 57-58

Now we can look at the result on a cropped part of the image.

.. GENERATED FROM PYTHON SOURCE LINES 58-66

.. code-block:: default

    crop = img.crop_corner(4000, 4000, size=2000)

    fig, axes = plt.subplots(1, 2)
    crop.show("image", ax=axes[0])
    _ = axes[0].set_title("original")
    crop.show("image_gray", cmap="gray", ax=axes[1])
    _ = axes[1].set_title("grayscale")




.. image:: /auto_examples/image/images/sphx_glr_compute_process_hires_001.png
    :alt: original, grayscale
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-74

Custom processing functions
+++++++++++++++++++++++++++
Here, we use a custom processing function (here :func:`scipy.ndimage.gaussian_filter`)
with chunking to showcase the ``depth`` and ``boundary`` arguments.

Lets use a simple image and choose the chunk size in such a way to clearly see the differences
between using overlapping crops and non-overlapping crops.

.. GENERATED FROM PYTHON SOURCE LINES 74-98

.. code-block:: default

    arr = np.zeros((20, 20))
    arr[10:] = 1
    img = sq.im.ImageContainer(arr, layer="image")

    # smooth the image using `depth` 0 and 1
    sq.im.process(
        img,
        layer="image",
        method=gaussian_filter,
        layer_added="smooth_depth0",
        chunks=10,
        sigma=1,
        apply_kwargs={"depth": 0},
    )
    sq.im.process(
        img,
        layer="image",
        method=gaussian_filter,
        layer_added="smooth_depth1",
        chunks=10,
        sigma=1,
        apply_kwargs={"depth": 1, "boundary": "reflect"},
    )








.. GENERATED FROM PYTHON SOURCE LINES 99-101

Plot the difference in results.
Using overlapping blocks with ``depth = 1`` removes the artifacts at the borders between chunks.

.. GENERATED FROM PYTHON SOURCE LINES 101-108

.. code-block:: default

    fig, axes = plt.subplots(1, 3)
    img.show("image", ax=axes[0])
    _ = axes[0].set_title("original")
    img.show("smooth_depth0", ax=axes[1])
    _ = axes[1].set_title("non-overlapping crops")
    img.show("smooth_depth1", ax=axes[2])
    _ = axes[2].set_title("overlapping crops")



.. image:: /auto_examples/image/images/sphx_glr_compute_process_hires_002.png
    :alt: original, non-overlapping crops, overlapping crops
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.139 seconds)

**Estimated memory usage:**  2106 MB


.. _sphx_glr_download_auto_examples_image_compute_process_hires.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_process_hires.py <compute_process_hires.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_process_hires.ipynb <compute_process_hires.ipynb>`
