
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_texture_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_texture_features.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_texture_features.py:

Extract texture features
------------------------

This example shows how to use :func:`squidpy.im.calculate_image_features`.

Textures features give give a measure of how the image intensity at different distances and angles varies by
calculating a grey-level co-occurrence matrix (`GLCM <https://en.wikipedia.org/wiki/Co-occurrence_matrix>`_).
The GLCM includes the number of times that grey-level :math:`j` occurs at a distance :math:`d`
and at an angle :math:`\\theta` from grey-level :math:`i`.
From this data, different features (``props``) are calculated.
See also :func:`skimage.feature.greycomatrix`.

In addition to ``feature_name`` and ``channels``, we can also specify the following ``features_kwargs``:

- ``distances`` - distances that are taken into account for finding repeating patterns.
- ``angles`` - range on which values are binned. Default is the whole image range.
- ``props`` - texture features that are extracted from the GLCM.

.. seealso::

    See :ref:`sphx_glr_auto_examples_image_compute_features.py` for general usage of
    :func:`squidpy.im.calculate_image_features`.

.. GENERATED FROM PYTHON SOURCE LINES 26-30

.. code-block:: default


    import scanpy as sc
    import squidpy as sq


.. GENERATED FROM PYTHON SOURCE LINES 31-37

Let's load the fluorescence Visium dataset and calculate texture features with default ``features_kwargs``.

Note that for texture features it may make sense to compute them over a larger crop size to include more context,
e.g., ``spot_scale = 2`` or ``spit_scale = 4`` which will extract crops with double or four times the radius
than the original Visium spot size.
For more details on the image cropping, see :ref:`sphx_glr_auto_examples_image_compute_crops.py`.

.. GENERATED FROM PYTHON SOURCE LINES 37-51

.. code-block:: default


    # get spatial dataset including high-resolution tissue image
    img = sq.datasets.visium_fluo_image_crop()
    adata = sq.datasets.visium_fluo_adata_crop()

    # calculate texture features and save in key "texture_features"
    sq.im.calculate_image_features(
        adata,
        img,
        features="texture",
        key_added="texture_features",
        spot_scale=2,
        show_progress_bar=False,
    )

.. GENERATED FROM PYTHON SOURCE LINES 52-53

The result is stored in ``adata.obsm['texture_features']``.

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default


    adata.obsm["texture_features"].head()


.. GENERATED FROM PYTHON SOURCE LINES 57-62

Use :func:`squidpy.pl.extract` to plot the texture features on the tissue image or have a look at
`our interactive visualisation tutorial <../../external_tutorials/tutorial_napari.html>`_ to learn
how to use our interactive :mod:`napari` plugin.
Here, we show the contrast feature for channels 0 and 1.
The two stains, DAPI in channel 0, and GFAP in channel 1 show different regions of high contrast.

.. GENERATED FROM PYTHON SOURCE LINES 62-68

.. code-block:: default


    sc.pl.spatial(
        sq.pl.extract(adata, "texture_features"),
        color=[None, "texture_ch-0_contrast_dist-1_angle-0.00", "texture_ch-1_contrast_dist-1_angle-0.00"],
        bw=True,
    )


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_image_compute_texture_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_texture_features.py <compute_texture_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_texture_features.ipynb <compute_texture_features.ipynb>`
