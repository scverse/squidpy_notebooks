
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_segment_hne.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_image_compute_segment_hne.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_segment_hne.py:


Advanced Cell-segmentation for H&E stains
-----------------------------------------

This example shows how to use processing and segmentation functions to segment images with H&E stains.
For a general example of how to use :func:`squidpy.im.segment_img`
see :ref:`sphx_glr_auto_examples_image_compute_segment_fluo.py`.

Here, we attempt to segment a noisy H&E stain.
Note that we only provide very basic segmentation models.
If you require precise cell-segmentation and cell-counts, you might want to add more pre-processing
and / or use a pre-trained model to do the segmentation (using :class:`squidpy.im.SegmentationModelTensorflow`).

.. GENERATED FROM PYTHON SOURCE LINES 15-27

.. code-block:: default


    import squidpy as sq

    import numpy as np

    import seaborn as sns
    import matplotlib.pyplot as plt

    # load H&E stained tissue image and crop to a smaller segment
    img = sq.datasets.visium_hne_image_crop()
    crop = img.crop_corner(0, 0, 1000, 1000)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Before segmenting the image, we do some preprocessing using :func:`squidpy.im.process_img`.

.. GENERATED FROM PYTHON SOURCE LINES 30-43

.. code-block:: default


    # convert to grayscale
    sq.im.process_img(crop, img_id="image", processing="gray")
    # smooth image
    sq.im.process_img(crop, img_id="image_gray", processing="smooth", sigma=4)

    # plot the result
    fig, axes = plt.subplots(1, 3)
    for img_id, ax in zip(["image", "image_gray", "image_gray_smooth"], axes):
        ax.imshow(np.squeeze(crop[img_id]))
        ax.set_title(img_id)
        ax.axis("off")




.. image:: /auto_examples/image/images/sphx_glr_compute_segment_hne_001.png
    :alt: image, image_gray, image_gray_smooth
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-48

Finding a good threshold for the segmentation is more difficult than for a DAPI stain,
as there is no distinct peak in the histogram.
Judging by the plot showing values smaller than 0.28, this threshold seems to be a good
choice for this example.

.. GENERATED FROM PYTHON SOURCE LINES 48-54

.. code-block:: default

    fig, axes = plt.subplots(1, 2, figsize=(12, 5))
    axes[0].imshow(crop["image_gray_smooth"][:, :, 0] < 0.28)
    axes[0].axis("off")
    _ = sns.histplot(np.array(crop["image_gray_smooth"]).flatten(), bins=50, ax=axes[1])





.. image:: /auto_examples/image/images/sphx_glr_compute_segment_hne_002.png
    :alt: compute segment hne
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 55-59

We use :func:`squidpy.im.segment_img` with ``mode="watershed"`` to do the segmentation.
Since, opposite to the fluorescence DAPI stain, in the H&E stain, nuclei appear darker,
we need to indicate the model that it should treat lower-intensity values as foreground.
We do this by specifying the ``geq=False`` in the ``kwargs``.

.. GENERATED FROM PYTHON SOURCE LINES 59-61

.. code-block:: default

    sq.im.segment_img(img=crop, img_id="image_gray_smooth", model_group="watershed", thresh=0.28, geq=False)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/squidpy/im/segment.py:146: FutureWarning: indices argument is deprecated and will be removed in version 0.20. To avoid this warning, please do not use the indices argument. Please see peak_local_max documentation for more details.
      local_maxi = peak_local_max(distance, indices=False, footprint=np.ones((5, 5)), labels=mask)




.. GENERATED FROM PYTHON SOURCE LINES 62-66

The segmented crop is saved in the layer `segmented_watershed`.
This behaviour can be changed with the arguments ``copy`` and ``key_added``.
The result of the segmentation is a label image that can be used to extract features
like the number of cells from the image.

.. GENERATED FROM PYTHON SOURCE LINES 66-76

.. code-block:: default

    print(crop)
    print(f"number of segments in crop: {len(np.unique(crop['segmented_watershed']))}")

    fig, axes = plt.subplots(1, 2)
    axes[0].imshow(crop["image_gray_smooth"][:, :, 0])
    axes[0].set_title("H&E")
    axes[1].imshow(crop["segmented_watershed"].squeeze(), cmap="jet", interpolation="none")
    axes[1].set_title("segmentation")
    for ax in axes:
        ax.axis("off")



.. image:: /auto_examples/image/images/sphx_glr_compute_segment_hne_003.png
    :alt: H&E, segmentation
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ImageContainer object with 4 layer(s)
        image: y (1000), x (1000), channels (3)
        image_gray: y (1000), x (1000), channels_gray (1)
        image_gray_smooth: y (1000), x (1000), channels_gray (1)
        segmented_watershed: y (1000), x (1000), segmented_channels_gray (1)

    number of segments in crop: 1227





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  21.479 seconds)

**Estimated memory usage:**  178 MB


.. _sphx_glr_download_auto_examples_image_compute_segment_hne.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_segment_hne.py <compute_segment_hne.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_segment_hne.ipynb <compute_segment_hne.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
