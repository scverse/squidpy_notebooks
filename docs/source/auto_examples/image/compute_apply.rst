
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_apply.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_apply.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_apply.py:

Convert to grayscale using the apply method
-------------------------------------------

This example shows how to use :meth:`squidpy.ImageContainer.apply` to convert an image layer to grayscale.
This calls :func:`squidpy.im.process` in the background.

We take the mean of the three channels(RGB) using the user-defined function ```rgb2gray```
to convert the image to grayscale.
The function ```rgb2gray``` computes the mean of the three channels (RGB) across axis 3.
The purpose of this example is to show how the ```apply``` method :meth:`squidpy.ImageContainer.apply` can be used.

.. seealso::
    - :ref:`sphx_glr_auto_examples_image_compute_smooth.py`
    - :ref:`sphx_glr_auto_examples_image_compute_process_hires.py`
    - :ref:`sphx_glr_auto_examples_image_compute_gray.py`

.. GENERATED FROM PYTHON SOURCE LINES 19-25

.. code-block:: default

    import squidpy as sq

    import numpy as np

    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 26-29

First, we load the H&E stained tissue image. Here, we only load a cropped dataset to speed things up.
In general, :meth:`squidpy.im.ImageContainer.apply` can also process very large images.
(see :ref:`sphx_glr_auto_examples_image_compute_process_hires.py`).

.. GENERATED FROM PYTHON SOURCE LINES 29-31

.. code-block:: default

    img = sq.datasets.visium_hne_image_crop()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/35.6M [00:00<?, ?B/s]      0%|          | 24.0k/35.6M [00:00<03:22, 184kB/s]      0%|          | 56.0k/35.6M [00:00<02:51, 218kB/s]      0%|          | 88.0k/35.6M [00:00<02:43, 228kB/s]      1%|          | 192k/35.6M [00:00<01:23, 447kB/s]       1%|1         | 376k/35.6M [00:00<00:47, 786kB/s]      2%|2         | 784k/35.6M [00:00<00:23, 1.56MB/s]      4%|4         | 1.55M/35.6M [00:00<00:11, 3.02MB/s]      9%|8         | 3.09M/35.6M [00:01<00:05, 5.85MB/s]     17%|#6        | 5.97M/35.6M [00:01<00:02, 10.9MB/s]     25%|##4       | 8.81M/35.6M [00:01<00:01, 14.3MB/s]     33%|###2      | 11.7M/35.6M [00:01<00:01, 16.7MB/s]     40%|###9      | 14.1M/35.6M [00:01<00:01, 17.2MB/s]     47%|####6     | 16.6M/35.6M [00:01<00:01, 17.9MB/s]     55%|#####4    | 19.5M/35.6M [00:01<00:00, 19.3MB/s]     56%|#####5    | 19.8M/35.6M [00:02<00:01, 14.0MB/s]     64%|######3   | 22.8M/35.6M [00:02<00:00, 16.7MB/s]     70%|#######   | 25.0M/35.6M [00:02<00:00, 16.8MB/s]     78%|#######8  | 27.8M/35.6M [00:02<00:00, 18.3MB/s]     86%|########6 | 30.7M/35.6M [00:02<00:00, 19.5MB/s]     94%|#########4| 33.6M/35.6M [00:02<00:00, 20.3MB/s]    100%|##########| 35.6M/35.6M [00:02<00:00, 13.6MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 32-37

The method :meth:`squidpy.im.ImageContainer.apply` takes a function as an input.
Such function, or a mapping of ```{'{library_id}': function}``` takes a
:class:`numpy.ndarray` as input and returns an image-like output.
Here, the function takes ```x````, which is a numpy array as an input and
returns the mean of three channels across axis 3 and produces image-like output.

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: default



    def rgb2gray(x):
        """Return the mean of numpy array along axis 3"""
        return np.mean(x, axis=3)









.. GENERATED FROM PYTHON SOURCE LINES 45-47

The H&E stained tissue image is an image layer of :class:`squidpy.im.ImageContainer`.
So, we add .apply and pass the previously defined function as an input.

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: default


    gray = img.apply(rgb2gray)







.. GENERATED FROM PYTHON SOURCE LINES 50-51

Then, we convert the image to grayscale and plot the result, using matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 51-58

.. code-block:: default


    fig, axes = plt.subplots(1, 2)
    img.show(ax=axes[0])
    _ = axes[0].set_title("Original")
    gray.show(cmap="gray", ax=axes[1])
    _ = axes[1].set_title("Grayscale")
    plt.show()



.. image-sg:: /auto_examples/image/images/sphx_glr_compute_apply_001.png
   :alt: Original, Grayscale
   :srcset: /auto_examples/image/images/sphx_glr_compute_apply_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.885 seconds)

**Estimated memory usage:**  676 MB


.. _sphx_glr_download_auto_examples_image_compute_apply.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_apply.py <compute_apply.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_apply.ipynb <compute_apply.ipynb>`
