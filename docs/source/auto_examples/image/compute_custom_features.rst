
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_custom_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_custom_features.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_custom_features.py:

Extract custom features
-----------------------

This example shows how to extract features from the tissue image using a custom function.

The custom feature calculation function can be any python function that takes an image as input, and
returns a list of features.
Here, we show a simple example by defining a function to calculate the mean of the images.

.. seealso::

    See :ref:`sphx_glr_auto_examples_image_compute_features.py` for general usage of
    :func:`squidpy.im.calculate_image_features`.

.. GENERATED FROM PYTHON SOURCE LINES 17-21

.. code-block:: default


    import scanpy as sc
    import squidpy as sq








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Lets load a H&E Visium dataset.

.. GENERATED FROM PYTHON SOURCE LINES 23-29

.. code-block:: default


    # get spatial dataset including high-resolution tissue image
    img = sq.datasets.visium_hne_image_crop()
    adata = sq.datasets.visium_hne_adata_crop()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0.00/35.6M [00:00<?, ?B/s]      0%|          | 56.0k/35.6M [00:00<01:30, 411kB/s]      0%|          | 176k/35.6M [00:00<00:54, 681kB/s]       2%|1         | 720k/35.6M [00:00<00:16, 2.17MB/s]      8%|8         | 2.86M/35.6M [00:00<00:04, 7.62MB/s]     23%|##2       | 8.03M/35.6M [00:00<00:01, 18.6MB/s]     37%|###6      | 13.1M/35.6M [00:00<00:00, 25.0MB/s]     53%|#####3    | 19.0M/35.6M [00:00<00:00, 31.0MB/s]     69%|######8   | 24.4M/35.6M [00:01<00:00, 33.9MB/s]     85%|########4 | 30.2M/35.6M [00:01<00:00, 36.7MB/s]    100%|##########| 35.6M/35.6M [00:01<00:00, 27.4MB/s]
      0%|          | 0.00/89.9M [00:00<?, ?B/s]      0%|          | 56.0k/89.9M [00:00<03:50, 409kB/s]      0%|          | 136k/89.9M [00:00<03:05, 506kB/s]       1%|          | 528k/89.9M [00:00<00:59, 1.57MB/s]      2%|2         | 2.02M/89.9M [00:00<00:17, 5.34MB/s]      7%|7         | 6.61M/89.9M [00:00<00:05, 15.7MB/s]     13%|#2        | 11.6M/89.9M [00:00<00:03, 22.9MB/s]     19%|#8        | 16.8M/89.9M [00:00<00:02, 28.2MB/s]     25%|##4       | 22.4M/89.9M [00:01<00:02, 32.4MB/s]     31%|###1      | 28.0M/89.9M [00:01<00:01, 35.3MB/s]     38%|###7      | 33.8M/89.9M [00:01<00:01, 37.6MB/s]     44%|####3     | 39.5M/89.9M [00:01<00:01, 39.0MB/s]     50%|#####     | 45.2M/89.9M [00:01<00:01, 40.3MB/s]     57%|#####6    | 50.9M/89.9M [00:01<00:01, 40.7MB/s]     63%|######2   | 56.5M/89.9M [00:01<00:00, 41.0MB/s]     69%|######9   | 62.4M/89.9M [00:02<00:00, 41.8MB/s]     76%|#######5  | 68.2M/89.9M [00:02<00:00, 42.3MB/s]     82%|########2 | 73.8M/89.9M [00:02<00:00, 42.1MB/s]     89%|########8 | 79.6M/89.9M [00:02<00:00, 42.4MB/s]     95%|#########4| 85.3M/89.9M [00:02<00:00, 42.5MB/s]    100%|##########| 89.9M/89.9M [00:02<00:00, 34.0MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 30-31

Define a custom feature extraction function.

.. GENERATED FROM PYTHON SOURCE LINES 31-40

.. code-block:: default



    def mean_fn(arr):
        """Compute mean of arr."""
        import numpy as np

        return np.mean(arr)









.. GENERATED FROM PYTHON SOURCE LINES 41-42

Now we can extract features using `mean_fn` by providing it within ``features_kwargs``

.. GENERATED FROM PYTHON SOURCE LINES 42-52

.. code-block:: default


    sq.im.calculate_image_features(
        adata,
        img,
        features="custom",
        features_kwargs={"custom": {"func": mean_fn}},
        key_added="custom_features",
        show_progress_bar=False,
    )








.. GENERATED FROM PYTHON SOURCE LINES 53-54

The result is stored in ``adata.obsm['custom_features']``.

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    adata.obsm["custom_features"].head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mean_fn_0</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>AAAGACCCAAGTCGCG-1</th>
          <td>101.868998</td>
        </tr>
        <tr>
          <th>AAAGGGATGTAGCAAG-1</th>
          <td>102.959180</td>
        </tr>
        <tr>
          <th>AAAGTCACTGATGTAA-1</th>
          <td>107.924715</td>
        </tr>
        <tr>
          <th>AAATGGCATGTCTTGT-1</th>
          <td>97.444851</td>
        </tr>
        <tr>
          <th>AAATGGTCAATGTGCC-1</th>
          <td>102.854690</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-61

Use :func:`squidpy.pl.extract` to plot the histogram features on the tissue image or have a look at
`our interactive visualisation tutorial <../../external_tutorials/tutorial_napari.ipynb>`_ to learn
how to use our interactive :mod:`napari` plugin.

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: default


    sc.pl.spatial(
        sq.pl.extract(adata, "custom_features"),
        color=[None, "mean_fn_0"],
        bw=True,
    )



.. image:: /auto_examples/image/images/sphx_glr_compute_custom_features_001.png
    :alt: mean_fn_0
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.772 seconds)

**Estimated memory usage:**  275 MB


.. _sphx_glr_download_auto_examples_image_compute_custom_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_custom_features.py <compute_custom_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_custom_features.ipynb <compute_custom_features.ipynb>`
