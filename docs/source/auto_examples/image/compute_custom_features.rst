
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_custom_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_custom_features.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_custom_features.py:

Extract custom features
-----------------------

This example shows how to extract features from the tissue image using a custom function.

The custom feature calculation function can be any python function that takes an image as input, and
returns a list of features.
Here, we show a simple example by defining a function to calculate the mean of the images.

Custom features are calculated by using ``features = 'custom'``, which calls
:func:`squidpy.im.ImageContainer.features_custom`.
In addition to ``feature_name`` and ``channels`` we can specify the following ``features_kwargs``:

    - ``func`` - custom feature extraction function.
    - ``additional_layers`` - names of image layers that should be passed to ``func`` together with ``layer``.
    - additional keyword arguments for ``func``.

.. seealso::

    See :ref:`sphx_glr_auto_examples_image_compute_features.py` for general usage of
    :func:`squidpy.im.calculate_image_features`.

.. GENERATED FROM PYTHON SOURCE LINES 25-29

.. code-block:: default


    import scanpy as sc
    import squidpy as sq








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Let's load the H&E Visium dataset.

.. GENERATED FROM PYTHON SOURCE LINES 31-37

.. code-block:: default


    # get spatial dataset including high-resolution tissue image
    img = sq.datasets.visium_hne_image_crop()
    adata = sq.datasets.visium_hne_adata_crop()









.. GENERATED FROM PYTHON SOURCE LINES 38-39

Define a custom feature extraction function.

.. GENERATED FROM PYTHON SOURCE LINES 39-46

.. code-block:: default

    def mean_fn(arr):
        """Compute mean of arr."""
        import numpy as np

        return np.mean(arr)









.. GENERATED FROM PYTHON SOURCE LINES 47-48

Now we can extract features using `mean_fn` by providing it within ``features_kwargs``.

.. GENERATED FROM PYTHON SOURCE LINES 48-57

.. code-block:: default

    sq.im.calculate_image_features(
        adata,
        img,
        features="custom",
        features_kwargs={"custom": {"func": mean_fn}},
        key_added="custom_features",
        show_progress_bar=False,
    )








.. GENERATED FROM PYTHON SOURCE LINES 58-59

The result is stored in ``adata.obsm['custom_features']``.

.. GENERATED FROM PYTHON SOURCE LINES 59-61

.. code-block:: default

    adata.obsm["custom_features"].head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mean_fn_0</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>AAAGACCCAAGTCGCG-1</th>
          <td>101.868998</td>
        </tr>
        <tr>
          <th>AAAGGGATGTAGCAAG-1</th>
          <td>102.959180</td>
        </tr>
        <tr>
          <th>AAAGTCACTGATGTAA-1</th>
          <td>107.924715</td>
        </tr>
        <tr>
          <th>AAATGGCATGTCTTGT-1</th>
          <td>97.444851</td>
        </tr>
        <tr>
          <th>AAATGGTCAATGTGCC-1</th>
          <td>102.854690</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 62-65

Use :func:`squidpy.pl.extract` to plot the histogram features on the tissue image or have a look at
`our interactive visualization tutorial <../../external_tutorials/tutorial_napari.ipynb>`_ to learn
how to use our interactive :mod:`napari` plugin.

.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: default

    sc.pl.spatial(
        sq.pl.extract(adata, "custom_features"),
        color=[None, "mean_fn_0"],
        bw=True,
    )





.. image:: /auto_examples/image/images/sphx_glr_compute_custom_features_001.png
    :alt: mean_fn_0
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-78

You can also pass more than one image layer to the custom feature extraction function.
For this, specify the necessary additional layer names using ``additional_layers`` in ``features_kwargs``.
The specified image layers will be passed to the custom feature extraction function.

Here, we show this behavior by defining a feature extraction function that sums two image layers:

.. GENERATED FROM PYTHON SOURCE LINES 78-96

.. code-block:: default

    def sum_fn(arr, extra_layer):
        """Compute sum of two image layers."""
        import numpy as np

        return np.sum(arr + extra_layer)


    img.add_img(img["image"].values, layer="extra_layer")

    sq.im.calculate_image_features(
        adata,
        img,
        layer="image",
        features="custom",
        features_kwargs={"custom": {"func": sum_fn, "additional_layers": ["extra_layer"]}},
        key_added="custom_features",
        show_progress_bar=False,
    )








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  28.075 seconds)

**Estimated memory usage:**  299 MB


.. _sphx_glr_download_auto_examples_image_compute_custom_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_custom_features.py <compute_custom_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_custom_features.ipynb <compute_custom_features.ipynb>`
