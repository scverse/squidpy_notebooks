
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_summary_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_summary_features.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_summary_features.py:

Extract summary features
------------------------

This example shows how to extract summary features from the tissue image.

Summary features give a good overview over the intensity of each image channels at the location of the Visium spots.
They are calculated by using ``features = 'summary'``.

In addition to ``feature_name`` and ``channels`` we can specify the following ``features_kwargs``:

- ``quantiles`` - quantiles that are computed. By default, the 0.9th, 0.5th, and 0.1th quantiles are calculated.

.. seealso::

    See :ref:`sphx_glr_auto_examples_image_compute_features.py` for general usage of
    :func:`squidpy.im.calculate_image_features`.

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default


    import scanpy as sc
    import squidpy as sq


.. GENERATED FROM PYTHON SOURCE LINES 25-26

First, we load a fluorescence Visium dataset.

.. GENERATED FROM PYTHON SOURCE LINES 26-32

.. code-block:: default


    # get spatial dataset including hires tissue image
    img = sq.datasets.visium_fluo_image_crop()
    adata = sq.datasets.visium_fluo_adata_crop()



.. GENERATED FROM PYTHON SOURCE LINES 33-37

Then, we calculate the 0.1th quantile, mean and standard deviation for the Visium spots
of the fluorescence channels 0 (DAPI) and 1 (GFAP).
In order to get statistics of only the tissue underneath the spots, we use the argument ``mask_circle = True``.
When not setting this flag, statistics are calculated using a square crop centered on the spot.

.. GENERATED FROM PYTHON SOURCE LINES 37-56

.. code-block:: default


    # calculate summary features and save in key "summary_features"
    sq.im.calculate_image_features(
        adata,
        img,
        features="summary",
        features_kwargs={
            "summary": {
                "quantiles": [
                    0.1,
                ],
                "channels": [0, 1],
            }
        },
        key_added="summary_features",
        mask_circle=True,
        show_progress_bar=False,
    )


.. GENERATED FROM PYTHON SOURCE LINES 57-58

The result is stored in ``adata.obsm['summary_features']``

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default


    adata.obsm["summary_features"].head()


.. GENERATED FROM PYTHON SOURCE LINES 62-67

Use :func:`squidpy.pl.extract` to plot the summary features on the tissue image or have a look at
`our interactive visualisation tutorial <../../external_tutorials/tutorial_napari.html>`_ to learn
how to use our interactive :mod:`napari` plugin.
Note how the spatial distribution of channel means is different for fluorescence channels 0 (DAPI stain)
and 1 (GFAP stain).

.. GENERATED FROM PYTHON SOURCE LINES 67-69

.. code-block:: default


    sc.pl.spatial(sq.pl.extract(adata, "summary_features"), color=[None, "summary_ch-0_mean", "summary_ch-1_mean"], bw=True)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_image_compute_summary_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_summary_features.py <compute_summary_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_summary_features.ipynb <compute_summary_features.ipynb>`
