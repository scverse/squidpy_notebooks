
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_summary_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_summary_features.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_summary_features.py:

Extract summary features
------------------------

This example shows how to extract summary features from the tissue image.

Summary features give a good overview over the intensity of each image channels at the location of the Visium spots.
They are calculated by using ``features = 'summary'``, which calls :func:`squidpy.im.ImageContainer.features_summary`.

In addition to ``feature_name`` and ``channels`` we can specify the following ``features_kwargs``:

    - ``quantiles`` - quantiles that are computed. By default, the 0.9th, 0.5th, and 0.1th quantiles are calculated.

.. seealso::

    See :ref:`sphx_glr_auto_examples_image_compute_features.py` for general usage of
    :func:`squidpy.im.calculate_image_features`.

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default


    import scanpy as sc
    import squidpy as sq








.. GENERATED FROM PYTHON SOURCE LINES 25-26

First, let's load the fluorescence Visium dataset.

.. GENERATED FROM PYTHON SOURCE LINES 26-32

.. code-block:: default


    # get spatial dataset including hires tissue image
    img = sq.datasets.visium_fluo_image_crop()
    adata = sq.datasets.visium_fluo_adata_crop()









.. GENERATED FROM PYTHON SOURCE LINES 33-37

Then, we calculate the 0.1th quantile, mean and standard deviation for the Visium spots
of the fluorescence channels 0 (DAPI) and 1 (GFAP).
In order to get statistics of only the tissue underneath the spots, we use the argument ``mask_circle = True``.
When not setting this flag, statistics are calculated using a square crop centered on the spot.

.. GENERATED FROM PYTHON SOURCE LINES 37-54

.. code-block:: default


    # calculate summary features and save in key "summary_features"
    sq.im.calculate_image_features(
        adata,
        img,
        features="summary",
        features_kwargs={
            "summary": {
                "quantiles": [0.1],
                "channels": [0, 1],
            }
        },
        key_added="summary_features",
        mask_circle=True,
        show_progress_bar=False,
    )








.. GENERATED FROM PYTHON SOURCE LINES 55-56

The result is stored in ``adata.obsm['summary_features']``.

.. GENERATED FROM PYTHON SOURCE LINES 56-58

.. code-block:: default

    adata.obsm["summary_features"].head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>summary_ch-0_quantile-0.1</th>
          <th>summary_ch-0_mean</th>
          <th>summary_ch-0_std</th>
          <th>summary_ch-1_quantile-0.1</th>
          <th>summary_ch-1_mean</th>
          <th>summary_ch-1_std</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>AAACGAGACGGTTGAT-1</th>
          <td>0.0</td>
          <td>6849.760120</td>
          <td>14383.136990</td>
          <td>0.0</td>
          <td>3762.582691</td>
          <td>2462.922155</td>
        </tr>
        <tr>
          <th>AAAGGGATGTAGCAAG-1</th>
          <td>0.0</td>
          <td>4469.448519</td>
          <td>11304.932832</td>
          <td>0.0</td>
          <td>3824.862145</td>
          <td>2153.804234</td>
        </tr>
        <tr>
          <th>AAATGGCATGTCTTGT-1</th>
          <td>0.0</td>
          <td>5944.567897</td>
          <td>9808.327041</td>
          <td>0.0</td>
          <td>5481.824787</td>
          <td>6747.728831</td>
        </tr>
        <tr>
          <th>AAATGGTCAATGTGCC-1</th>
          <td>0.0</td>
          <td>5259.799257</td>
          <td>9115.113451</td>
          <td>0.0</td>
          <td>2628.194501</td>
          <td>1418.504292</td>
        </tr>
        <tr>
          <th>AAATTAACGGGTAGCT-1</th>
          <td>0.0</td>
          <td>4468.428701</td>
          <td>10285.605481</td>
          <td>0.0</td>
          <td>4036.154302</td>
          <td>4447.304626</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 59-64

Use :func:`squidpy.pl.extract` to plot the summary features on the tissue image or have a look at
`our interactive visualization tutorial <../../external_tutorials/tutorial_napari.ipynb>`_ to learn
how to use our interactive :mod:`napari` plugin.
Note how the spatial distribution of channel means is different for fluorescence channels 0 (DAPI stain)
and 1 (GFAP stain).

.. GENERATED FROM PYTHON SOURCE LINES 64-65

.. code-block:: default

    sc.pl.spatial(sq.pl.extract(adata, "summary_features"), color=[None, "summary_ch-0_mean", "summary_ch-1_mean"], bw=True)



.. image:: /auto_examples/image/images/sphx_glr_compute_summary_features_001.png
    :alt: summary_ch-0_mean, summary_ch-1_mean
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  0.408 seconds)

**Estimated memory usage:**  374 MB


.. _sphx_glr_download_auto_examples_image_compute_summary_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_summary_features.py <compute_summary_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_summary_features.ipynb <compute_summary_features.ipynb>`
