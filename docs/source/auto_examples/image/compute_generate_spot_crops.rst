
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_generate_spot_crops.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scverse/squidpy_notebooks/main?filepath=docs/source/auto_examples/image/compute_generate_spot_crops.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_generate_spot_crops.py:

Generate cropped images from spots
----------------------------------

This example shows how to use :meth:`squidpy.im.ImageContainer.generate_spot_crops`.

High-resolution tissue slides might be too large to fit in the memory.
Therefore, we use a generator that produces cropped images from the original image container object.
:meth:`squidpy.im.ImageContainer.generate_spot_crops` iterates over :attr:`anndata.AnnData.obsm` and extracts crops.

For Z-stacks, the specified ``library_id`` or list of ``library_id`` need to match the name of the Z-dimension.
Always extracts 2D crops from the specified Z-dimension.

.. seealso::
    - :ref:`sphx_glr_auto_examples_image_compute_crops.py`
    - :ref:`sphx_glr_auto_examples_image_compute_process_hires.py`
    - :ref:`sphx_glr_auto_examples_image_compute_gray.py`

.. GENERATED FROM PYTHON SOURCE LINES 20-25

.. code-block:: default


    import squidpy as sq

    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 26-31

First, we load the H&E stained tissue image.
Here, we only load a cropped dataset to speed things up.
In general, :meth:`squidpy.im.ImageContainer.generate_spot_crops` can also process very large images.
See :ref:`sphx_glr_auto_examples_image_compute_process_hires.py`.
Second, we load the related anndata for the H&E stained tissue image.

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: default

    img = sq.datasets.visium_hne_image_crop()
    adata = sq.datasets.visium_hne_adata_crop()








.. GENERATED FROM PYTHON SOURCE LINES 35-39

Next, we use :meth:`squidpy.im.ImageContainer.generate_spot_crops` to make a generator that generates cropped images.
The argument ``as_array`` specify the type in which the crop is returned. If we pass a specific
layer in the :class:`squidpy.im.ImageContainer` then it will return a plain :class:`numpy.ndarray`.
Check the documentation of the method :meth:`squidpy.im.ImageContainer.generate_spot_crops`.

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    gen = img.generate_spot_crops(adata, scale=0.5, as_array="image", squeeze=True)








.. GENERATED FROM PYTHON SOURCE LINES 42-44

When called, the ``next(gen)`` produces consecutive cropped images each time.
Let's plot the cropped images using matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 44-51

.. code-block:: default

    fig, axes = plt.subplots(1, 5)
    fig.set_size_inches((20, 6))
    for i in range(5):
        axes[i].set_title(f"Cropped image {i+1}")
        axes[i].axis("off")
        axes[i].imshow(next(gen))




.. image-sg:: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_001.png
   :alt: Cropped image 1, Cropped image 2, Cropped image 3, Cropped image 4, Cropped image 5
   :srcset: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 52-56

We will now see how the cropped images differ with change in ``spot_size``.
``scale = 1`` would crop the spot with exact diameter size. You can crop larger area by
increasing the ``scale``.
To illustrate this, we change the spot_size and plot the images again by looping on ``next(gen)``.

.. GENERATED FROM PYTHON SOURCE LINES 56-64

.. code-block:: default

    gen = img.generate_spot_crops(adata, scale=1.5, as_array="image", squeeze=True)
    fig, axes = plt.subplots(1, 5)
    fig.set_size_inches((20, 6))
    for i in range(5):
        axes[i].set_title(f"Cropped spot {i}")
        axes[i].axis("off")
        axes[i].imshow(next(gen))




.. image-sg:: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_002.png
   :alt: Cropped spot 0, Cropped spot 1, Cropped spot 2, Cropped spot 3, Cropped spot 4
   :srcset: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-66

We can see the increase in the context with increase in the ``spot_size``.

.. GENERATED FROM PYTHON SOURCE LINES 66-74

.. code-block:: default

    gen = img.generate_spot_crops(adata, spot_scale=2, as_array="image", squeeze=True)
    fig, axes = plt.subplots(1, 5)
    fig.set_size_inches((20, 6))
    for i in range(5):
        axes[i].set_title(f"Cropped spot {i}")
        axes[i].axis("off")
        axes[i].imshow(next(gen))




.. image-sg:: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_003.png
   :alt: Cropped spot 0, Cropped spot 1, Cropped spot 2, Cropped spot 3, Cropped spot 4
   :srcset: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 75-77

Argument ``as_array`` also takes boolean ``True`` to return a ``dict`` where the keys are layers and
values are ``numpy.ndarray``. In this case, there is only one layer: ``'image'``

.. GENERATED FROM PYTHON SOURCE LINES 77-82

.. code-block:: default

    gen = img.generate_spot_crops(adata, spot_scale=0.5, as_array=True, squeeze=True)
    dic = next(gen)
    image = dic["image"]
    plt.imshow(image)




.. image-sg:: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_004.png
   :alt: compute generate spot crops
   :srcset: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.image.AxesImage object at 0x1351148b0>



.. GENERATED FROM PYTHON SOURCE LINES 83-84

Passing ``False`` to the argument ``as_array`` returns a :class:`squidpy.im.ImageContainer`.

.. GENERATED FROM PYTHON SOURCE LINES 84-88

.. code-block:: default

    gen = img.generate_spot_crops(adata, spot_scale=2, as_array=False, squeeze=True)
    for _ in range(5):
        next(gen).show(figsize=(2, 2), dpi=40)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_005.png
         :alt: image
         :srcset: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_006.png
         :alt: image
         :srcset: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_007.png
         :alt: image
         :srcset: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_008.png
         :alt: image
         :srcset: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_009.png
         :alt: image
         :srcset: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_009.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 89-93

If ``return_obs = True``, yields a ``tuple`` (cropped image, ``obs_name``). Otherwise, yields just the crops.
The type of the crops depends on ``as_array`` and the number of dimensions on ``squeeze``.
Such generator could be used downstream in machine learning applications, where the class label as well
as the image is needed.

.. GENERATED FROM PYTHON SOURCE LINES 93-97

.. code-block:: default

    gen = img.generate_spot_crops(adata, spot_scale=2, as_array="image", squeeze=True, return_obs=True)
    image, obs_name = next(gen)
    plt.imshow(image)
    plt.title(obs_name)



.. image-sg:: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_010.png
   :alt: AAAGACCCAAGTCGCG-1
   :srcset: /auto_examples/image/images/sphx_glr_compute_generate_spot_crops_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'AAAGACCCAAGTCGCG-1')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  24.281 seconds)

**Estimated memory usage:**  295 MB


.. _sphx_glr_download_auto_examples_image_compute_generate_spot_crops.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_generate_spot_crops.py <compute_generate_spot_crops.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_generate_spot_crops.ipynb <compute_generate_spot_crops.ipynb>`
