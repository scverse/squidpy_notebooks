
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_segment_fluo.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_image_compute_segment_fluo.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_segment_fluo.py:


Cell-segmentation
------------------

We can use the high resolution tissue images to segment nuclei.
This information can be used to compute additional image features like cell count and cell size per spot
(see :ref:`sphx_glr_auto_examples_image_compute_segmentation_features.py`).
This example shows how to use :func:`squidpy.im.segment_img` and explains the parameters you can use.

We provide two segmentation models :class:`squidpy.im.SegmentationModelBlob`
and :class:`squidpy.im.SegmentationModelWatershed`.
In addition, you can use your own pre-trained :mod:`tensorflow.keras` model to perform the segmentation
utilising :class:`squidpy.im.SegmentationModelTensorflow`.

Note that when using the provided segmentation models ``"blob"`` and ``"watershed"``, the quality of the
cell-segmentation depends on the quality of your tissue images.
In this example we use the DAPI stain of a fluorescence dataset that clearly shows the nuclei to do the segmentation.
For harder cases, you may want to provide your own pre-trained segmentation model.

See :ref:`sphx_glr_auto_examples_image_compute_segment_hne.py` for an example of how to
calculate a cell-segmentation of an H&E stain.

.. GENERATED FROM PYTHON SOURCE LINES 24-36

.. code-block:: default


    import squidpy as sq

    import numpy as np

    import seaborn as sns
    import matplotlib.pyplot as plt

    # load fluorescence tissue image
    img = sq.datasets.visium_fluo_image_crop()









.. GENERATED FROM PYTHON SOURCE LINES 38-41

We crop the image to a smaller segment.
This is only to speed things up, :func:`squidpy.im.segment_img` can also process very large images
(see :ref:`sphx_glr_auto_examples_image_compute_process_hires.py`.)

.. GENERATED FROM PYTHON SOURCE LINES 41-43

.. code-block:: default

    crop = img.crop_corner(1000, 1000, 1000, 1000)








.. GENERATED FROM PYTHON SOURCE LINES 44-46

The tissue image in this dataset contains four fluorescence stains.
The first one is DAPI, which we will use for the nuclei-segmentation.

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: default


    fig, axes = plt.subplots(1, 3, figsize=(10, 20))
    for i, ax in enumerate(axes):
        ax.imshow(crop["image"][:, :, i])
        ax.axis("off")




.. image:: /auto_examples/image/images/sphx_glr_compute_segment_fluo_001.png
    :alt: compute segment fluo
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 53-55

For watershed segmentation, we need to set a threshold to create the mask image.
The threshold should be chosen in such a way, that all nuclei are contained in the mask image.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default

    fig, ax = plt.subplots(1, 1, figsize=(5, 3))
    _ = sns.histplot(np.asarray(crop["image"][:, :, 0]).flatten(), bins=50, ax=ax)




.. image:: /auto_examples/image/images/sphx_glr_compute_segment_fluo_002.png
    :alt: compute segment fluo
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 59-71

The histogram of DAPI values shows a small peak at 60000 containing the nuclei.
So, let us choose 50000 as a threshold for the segmentation method.

We segment the image using the chosen threshold with :func:`squidpy.im.segment_img`.
The argument ``image_id`` sets the image layer of img that should be segmented.
Since we are segmenting the first channel, we will set ``channel_idx=0``.
With the argument ``model_group`` we specify the model that we'd like to use for the segmentation.
In our case this is ``"watershed"``.
With ``kwargs`` we can provide keyword arguments to the segmentation model.
For watershed, we need to set the threshold, ``thresh=50000``, as determined above.
In addition, we can specify if the values greater or equal than the threshold should be in the mask (default)
or if the values smaller to the threshold should be in the mask (``geq=False``).

.. GENERATED FROM PYTHON SOURCE LINES 71-73

.. code-block:: default

    sq.im.segment_img(img=crop, img_id="image", model_group="watershed", channel_idx=0, thresh=50000)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/squidpy/im/segment.py:146: FutureWarning: indices argument is deprecated and will be removed in version 0.20. To avoid this warning, please do not use the indices argument. Please see peak_local_max documentation for more details.
      local_maxi = peak_local_max(distance, indices=False, footprint=np.ones((5, 5)), labels=mask)




.. GENERATED FROM PYTHON SOURCE LINES 74-78

The segmented crop is saved in the layer ``segmented_watershed``.
This behaviour can be changed with the arguments ``copy`` and ``key_added``.
The result of the segmentation is a label image that can be used to extract features like the
number of cells from the image.

.. GENERATED FROM PYTHON SOURCE LINES 78-88

.. code-block:: default

    print(crop)
    print(f"number of segments in crop: {len(np.unique(crop['segmented_watershed']))}")

    fig, axes = plt.subplots(1, 2)
    axes[0].imshow(crop["image"][:, :, 0])
    axes[0].set_title("DAPI")
    axes[1].imshow(crop["segmented_watershed"].squeeze(), cmap="jet", interpolation="none")
    axes[1].set_title("segmentation")
    for ax in axes:
        ax.axis("off")



.. image:: /auto_examples/image/images/sphx_glr_compute_segment_fluo_003.png
    :alt: DAPI, segmentation
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ImageContainer object with 2 layer(s)
        image: y (1000), x (1000), channels (3)
        segmented_watershed: y (1000), x (1000), segmented_channels (1)

    number of segments in crop: 626





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  21.049 seconds)

**Estimated memory usage:**  906 MB


.. _sphx_glr_download_auto_examples_image_compute_segment_fluo.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_segment_fluo.py <compute_segment_fluo.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_segment_fluo.ipynb <compute_segment_fluo.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
