
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_segment_fluo.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_segment_fluo.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_segment_fluo.py:

Cell-segmentation for fluorescence images
-----------------------------------------

This example shows how to use the high resolution tissue images to segment nuclei.

This information can be used to compute additional image features like cell count and cell size per spot
(see :ref:`sphx_glr_auto_examples_image_compute_segmentation_features.py`).
This example shows how to use :func:`squidpy.im.segment` and explains the parameters you can use.

We provide a built-in segmentation model :class:`squidpy.im.SegmentationWatershed`.
In addition, you can use a custom segmentation function, like a pre-trained :mod:`tensorflow.keras` model,
to perform the segmentation utilizing :class:`squidpy.im.SegmentationCustom`.

Note that when using the provided segmentation model `'watershed'`, the quality of the
cell-segmentation depends on the quality of your tissue images.
In this example we use the DAPI stain of a fluorescence dataset to compute the segmentation.
For harder cases, you may want to provide your own pre-trained segmentation model.

.. seealso::

    - :ref:`sphx_glr_auto_examples_image_compute_segment_hne.py` for an example on how to
      calculate a cell-segmentation of an H&E stain.
    - `Nuclei Segmentation using Cellpose <../../external_tutorials/tutorial_cellpose_segmentation.ipynb>`_
      for a tutorial on using Cellpose as a custom segmentation function.
    - `Nuclei Segmentation using StarDist <../../external_tutorials/tutorial_stardist.ipynb>`_
      for a tutorial on using StarDist as a custom segmentation function.

.. GENERATED FROM PYTHON SOURCE LINES 30-41

.. code-block:: default


    import squidpy as sq

    import numpy as np

    import matplotlib.pyplot as plt

    # load fluorescence tissue image
    img = sq.datasets.visium_fluo_image_crop()









.. GENERATED FROM PYTHON SOURCE LINES 42-45

We crop the image to a smaller segment.
This is only to speed things up, :func:`squidpy.im.segment` can also process very large images
(see :ref:`sphx_glr_auto_examples_image_compute_process_hires.py`).

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: default

    crop = img.crop_corner(1000, 1000, size=1000)








.. GENERATED FROM PYTHON SOURCE LINES 48-50

The tissue image in this dataset contains four fluorescence stains.
The first one is DAPI, which we will use for the nuclei-segmentation.

.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: default

    crop.show("image", channelwise=True)




.. image:: /auto_examples/image/images/sphx_glr_compute_segment_fluo_001.png
    :alt: image:0, image:1, image:2
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 53-69

We segment the image with :func:`squidpy.im.segment` using watershed segmentation
(``method = 'watershed'``).
With the arguments ``layer`` and ``channel`` we define the image layer and
channel of the image that should be segmented.

With ``kwargs`` we can provide keyword arguments to the segmentation model.
For watershed segmentation, we need to set a threshold to create the mask image.
You can either set a manual threshold, or use automated
`Otsu thresholding <https://en.wikipedia.org/wiki/Otsu%27s_method>`_.
For this fluorescence image example, Otsu's thresh works very well, thus we will use ``thresh = None``.
See :ref:`sphx_glr_auto_examples_image_compute_segment_hne.py`
for an example where we use a manually defined threshold.

In addition, we can specify if the values greater or equal than
the threshold should be in the mask (default)
or if the values smaller to the threshold should be in the mask (``geq = False``).

.. GENERATED FROM PYTHON SOURCE LINES 69-71

.. code-block:: default

    sq.im.segment(img=crop, layer="image", channel=0, method="watershed", thresh=None, geq=True)








.. GENERATED FROM PYTHON SOURCE LINES 72-76

The segmented crop is saved in the layer ``segmented_watershed``.
This behavior can be changed with the arguments ``copy`` and ``layer_added``.
The result of the segmentation is a label image that can be used to extract features like the
number of cells from the image.

.. GENERATED FROM PYTHON SOURCE LINES 76-84

.. code-block:: default

    print(crop)
    print(f"Number of segments in crop: {len(np.unique(crop['segmented_watershed']))}")

    fig, axes = plt.subplots(1, 2)
    crop.show("image", channel=0, ax=axes[0])
    _ = axes[0].set_title("DAPI")
    crop.show("segmented_watershed", cmap="jet", interpolation="none", ax=axes[1])
    _ = axes[1].set_title("segmentation")



.. image:: /auto_examples/image/images/sphx_glr_compute_segment_fluo_002.png
    :alt: DAPI, segmentation
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ImageContainer[shape=(1000, 1000), layers=['image', 'segmented_watershed']]
    Number of segments in crop: 580





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.161 seconds)

**Estimated memory usage:**  305 MB


.. _sphx_glr_download_auto_examples_image_compute_segment_fluo.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_segment_fluo.py <compute_segment_fluo.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_segment_fluo.ipynb <compute_segment_fluo.ipynb>`
