
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_smooth.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_image_compute_smooth.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_smooth.py:


Smoothing an Image
------------------

This example shows how to use :func:`squidpy.im.process_img` to smooth an image layer of
:class:`squidpy.im.ImageContainer`.

We use the argument ``processing="smooth"`` to smooth the image.
This calls :func:`skimage.filters.gaussian` in the background.
Keyword arguments ``kwargs`` are passed to the wrapped function.
This allows us to set the width of the gaussian kernel, ``sigma``, used for smoothing.

See also :ref:`sphx_glr_auto_examples_image_compute_gray.py` and
:ref:`sphx_glr_auto_examples_image_compute_process_hires.py`

.. GENERATED FROM PYTHON SOURCE LINES 16-26

.. code-block:: default


    import os

    import squidpy as sq

    import matplotlib.pyplot as plt

    # load H&E stained tissue image
    img = sq.im.ImageContainer(os.path.expanduser("~/.cache/squidpy/tutorial_data/visium_hne_crop.tiff"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/rasterio/__init__.py:221: NotGeoreferencedWarning: Dataset has no geotransform set. The identity matrix may be returned.
      s = DatasetReader(path, driver=driver, sharing=sharing, **kwargs)




.. GENERATED FROM PYTHON SOURCE LINES 27-30

First, we crop a smaller image to smooth.
This is only to speed things up, :func:`squidpy.im.process_img` can also process very large images
(see :ref:`sphx_glr_auto_examples_image_compute_process_hires.py`.)

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    crop = img.crop_corner(0, 0, 500, 500)








.. GENERATED FROM PYTHON SOURCE LINES 33-37

Smooth the image with ``"sigma" = 2``.
With the argument ``img_id`` we can select the image layer that should be processed.
By default, the resulting image is saved in the layer ``image_smooth`.
This behaviour can be changed with the arguments ``copy`` and ``key_added``.

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default


    sq.im.process_img(crop, img_id="image", processing="smooth", sigma = 2)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/hannah.spitzer/projects/spatial_scanpy/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/squidpy/im/processing.py:74: RuntimeWarning: Images with dimensions (M, N, 3) are interpreted as 2D+RGB by default. Use `multichannel=False` to interpret as 3D image with last dimension of length 3.
      skimage.filters.gaussian(crop[img_id], **kwargs),




.. GENERATED FROM PYTHON SOURCE LINES 41-42

Now we can plot the result

.. GENERATED FROM PYTHON SOURCE LINES 42-47

.. code-block:: default

    fig, axes = plt.subplots(1, 2)
    axes[0].imshow(crop["image"])
    axes[1].imshow(crop["image_smooth"])
    for ax in axes:
        ax.axis("off")



.. image:: /auto_examples/image/images/sphx_glr_compute_smooth_001.png
    :alt: compute smooth
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  21.490 seconds)

**Estimated memory usage:**  267 MB


.. _sphx_glr_download_auto_examples_image_compute_smooth.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_smooth.py <compute_smooth.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_smooth.ipynb <compute_smooth.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
