
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_smooth.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_smooth.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_smooth.py:

Smooth an image
---------------

This example shows how to use :func:`squidpy.im.process` to smooth an image layer of :class:`squidpy.im.ImageContainer`.

We use the argument ``method="smooth"`` to smooth the image.
This calls :func:`skimage.filters.gaussian` in the background.
Keyword arguments ``kwargs`` are passed to the wrapped function.
This allows us to set the width of the Gaussian kernel, :math:`\\sigma`, used for smoothing.

.. seealso::

    - :ref:`sphx_glr_auto_examples_image_compute_gray.py`.
    - :ref:`sphx_glr_auto_examples_image_compute_process_hires.py`.

.. GENERATED FROM PYTHON SOURCE LINES 18-26

.. code-block:: default


    import squidpy as sq

    import matplotlib.pyplot as plt

    # load H&E stained tissue image
    img = sq.datasets.visium_hne_image_crop()


.. GENERATED FROM PYTHON SOURCE LINES 27-31

Smooth the image with ``sigma = 2``.
With the argument ``layer`` we can select the image layer that should be processed.
By default, the resulting image is saved in the layer ``image_smooth``.
This behavior can be changed with the arguments ``copy`` and ``layer_added``.

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: default


    sq.im.process(img, layer="image", method="smooth", sigma=2)


.. GENERATED FROM PYTHON SOURCE LINES 35-36

Now we can look at the result on a cropped part of the image.

.. GENERATED FROM PYTHON SOURCE LINES 36-42

.. code-block:: default

    crop = img.crop_corner(0, 0, size=200)

    fig, axes = plt.subplots(1, 2)
    for i, layer in enumerate(["image", "image_smooth"]):
        crop.show(layer, ax=axes[i])
        axes[i].set_title(layer)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_image_compute_smooth.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_smooth.py <compute_smooth.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_smooth.ipynb <compute_smooth.ipynb>`
