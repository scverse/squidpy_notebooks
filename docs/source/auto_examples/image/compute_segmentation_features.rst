
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_segmentation_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_segmentation_features.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_segmentation_features.py:

Extract segmentation features
-----------------------------

This example shows how to extract segmentation features from the tissue image.

Features extracted from a nucleus segmentation range from the number of nuclei per image,
over nuclei shapes and sizes, to the intensity of the input channels within the segmented objects.
They are very interpretable features and provide valuable additional information.
Use ``features='segmentation'`` to calculate the features.

In addition to ``feature_name`` and ``channels`` we can specify the following ``features_kwargs``:

- ``label_layer`` - name of label image layer in ``img``.
- ``props`` - segmentation features that are calculated. See `properties` in :func:`skimage.measure.regionprops_table`.

.. seealso::

    - :ref:`sphx_glr_auto_examples_image_compute_segment_fluo.py` for more details
      on calculating a cell-segmentation.
    - :ref:`sphx_glr_auto_examples_image_compute_features.py` for the general usage of
      :func:`squidpy.im.calculate_image_features`.

.. GENERATED FROM PYTHON SOURCE LINES 25-31

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    import matplotlib.pyplot as plt


.. GENERATED FROM PYTHON SOURCE LINES 32-33

Lets load a fluorescence Visium dataset.

.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: default


    img = sq.datasets.visium_fluo_image_crop()
    adata = sq.datasets.visium_fluo_adata_crop()


.. GENERATED FROM PYTHON SOURCE LINES 38-40

Before calculating segmentation features, we need to first calculate a segmentation
using :func:`squidpy.im.segment`.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default


    sq.im.segment(img=img, layer="image", layer_added="segmented_watershed", method="watershed", channel=0)


.. GENERATED FROM PYTHON SOURCE LINES 44-52

Now we can calculate segmentation features. Here, we will calculate the following features:

- number of nuclei (``label``).
- mean area of nuclei (``area``).
- mean intensity of channels 1 (anti-NEUN) and 2 (anti-GFAP) within nuclei (``mean_intensity``).

We use ``mask_cicle = True`` to ensure that we are only extracting features from the tissue underneath
each Visium spot. For more details on the image cropping, see :ref:`sphx_glr_auto_examples_image_compute_crops.py`.

.. GENERATED FROM PYTHON SOURCE LINES 52-69

.. code-block:: default


    sq.im.calculate_image_features(
        adata,
        img,
        layer="image",
        features="segmentation",
        key_added="segmentation_features",
        features_kwargs={
            "segmentation": {
                "label_layer": "segmented_watershed",
                "props": ["label", "area", "mean_intensity"],
                "channels": [1, 2],
            }
        },
        mask_circle=True,
    )


.. GENERATED FROM PYTHON SOURCE LINES 70-71

The result is stored in ``adata.obsm['segmentation_features']``.

.. GENERATED FROM PYTHON SOURCE LINES 71-74

.. code-block:: default


    adata.obsm["segmentation_features"].head()


.. GENERATED FROM PYTHON SOURCE LINES 75-79

Use :func:`squidpy.pl.extract` to plot the texture features on the tissue image or have a look at
`our interactive visualisation tutorial <../../external_tutorials/tutorial_napari.html>`_ to learn
how to use our interactive :mod:`napari` plugin.
Here, we show all calculated segmentation features.

.. GENERATED FROM PYTHON SOURCE LINES 79-101

.. code-block:: default


    # show all channels (using low-res image contained in adata to save memory)
    fig, axes = plt.subplots(1, 3, figsize=(8, 4))
    for i, ax in enumerate(axes):
        ax.imshow(adata.uns["spatial"]["V1_Adult_Mouse_Brain_Coronal_Section_2"]["images"]["hires"][:, :, i])
        ax.set_title(f"ch{i}")

    # plot segmentation features
    sc.pl.spatial(
        sq.pl.extract(adata, "segmentation_features"),
        color=[
            "segmentation_label",
            "segmentation_area_mean",
            "segmentation_ch-1_mean_intensity_mean",
            "segmentation_ch-2_mean_intensity_mean",
        ],
        bw=True,
        ncols=2,
        vmin="p1",
        vmax="p99",
    )


.. GENERATED FROM PYTHON SOURCE LINES 102-106

`segmentation_label` shows the number of nuclei per spot and `segmentation_area_mean` the mean are of nuclei per spot.
The remaining two plots show the mean intensity of channels 1 and 2 per spot.
As the stains for channels 1 and 2 are specific to Neurons and Glial cells, respectively,
these features show us Neuron and Glial cell dense areas.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_image_compute_segmentation_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_segmentation_features.py <compute_segmentation_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_segmentation_features.ipynb <compute_segmentation_features.ipynb>`
