
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/image/compute_histogram_features.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_examples/image/compute_histogram_features.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_image_compute_histogram_features.py:

Extract histogram features
--------------------------

This example shows how to extract histogram features from tissue image.

Histogram features give a more detailed view than summary features
(:ref:`sphx_glr_auto_examples_image_compute_summary_features.py`)
by computing a histogram of each image channel and returning bin-counts for each Visium spot.

In addition to ``feature_name`` and ``channels`` we can specify the following ``features_kwargs``:

- ``bins`` - number of bins of the histogram, default is 10.
- ``v_range`` - range on which values are binned, default is the whole image range.

.. seealso::

    See :ref:`sphx_glr_auto_examples_image_compute_features.py` for general usage of
    :func:`squidpy.im.calculate_image_features`.

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: default


    import scanpy as sc
    import squidpy as sq


.. GENERATED FROM PYTHON SOURCE LINES 27-28

Lets load a fluorescence Visium dataset and calculate bin-counts (3 bins) of channels 0 and 1.

.. GENERATED FROM PYTHON SOURCE LINES 28-43

.. code-block:: default



    # get spatial dataset including high-resolution tissue image
    img = sq.datasets.visium_fluo_image_crop()
    adata = sq.datasets.visium_fluo_adata_crop()

    # calculate histogram features and save in key "histogram_features"
    sq.im.calculate_image_features(
        adata,
        img,
        features="histogram",
        features_kwargs={"histogram": {"bins": 3, "channels": [0, 1]}},
        key_added="histogram_features",
    )


.. GENERATED FROM PYTHON SOURCE LINES 44-45

The result is stored in ``adata.obsm['histogram_features']``.

.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. code-block:: default


    adata.obsm["histogram_features"].head()


.. GENERATED FROM PYTHON SOURCE LINES 49-54

Use :func:`squidpy.pl.extract` to plot the histogram features on the tissue image or have a look at
`our interactive visualisation tutorial <../../external_tutorials/tutorial_napari.html>`_ to
learn how to use our interactive :mod:`napari` plugin.
With these features we can e.g. appreciate the detailed distribution of
intensity values of channel 0 (DAPI stain) on the different bins.

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: default


    sc.pl.spatial(
        sq.pl.extract(adata, "histogram_features"),
        color=[None, "histogram_ch-0_bin-0", "histogram_ch-0_bin-1", "histogram_ch-0_bin-2"],
        bw=True,
    )


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_auto_examples_image_compute_histogram_features.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: compute_histogram_features.py <compute_histogram_features.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: compute_histogram_features.ipynb <compute_histogram_features.ipynb>`
