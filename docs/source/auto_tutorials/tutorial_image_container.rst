
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_image_container.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_tutorials/tutorial_image_container.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_image_container.py:

ImageContainer object
=====================

This tutorial shows how to use :class:`squidpy.im.ImageContainer` to interact with image structured data.

The ImageContainer is the central object in Squidpy containing the high resolution images.
It wraps :class:`xarray.Dataset` and provides different cropping, processing, and feature extraction functions.

.. seealso::

    For more details on specific :class:`squidpy.im.ImageContainer` functions, have a look at the following examples:

        - `Interactive visualization with Napari <../external_tutorials/tutorial_napari.ipynb>`_.
        - :ref:`sphx_glr_auto_tutorials_tutorial_image_container_zstacks.py`.
        - :ref:`sphx_glr_auto_examples_image_compute_crops.py`.
        - :ref:`sphx_glr_auto_examples_image_compute_show.py`.

.. GENERATED FROM PYTHON SOURCE LINES 20-25

.. code-block:: default


    import squidpy as sq

    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 26-46

Initialize ImageContainer
-------------------------
The :class:`squidpy.im.ImageContainer` constructor can read in memory
:class:`numpy.ndarray`/:class:`xarray.DataArray` or on-disk image files.
The `ImageContainer` can store multiple image layers (for example an image and a matching segmentation mask).

Images are expected to have at least a `x` and `y` dimension, with optional `channel` and `z` dimensions.
Here, we will focus on 2D images without at `z` dimension, see
:ref:`sphx_glr_auto_tutorials_tutorial_image_container_zstacks.py` for a tutorial on how
to use z-stacks with `ImageContainer`.

Most important arguments upon initialization are:

  - `img` - the image.
  - `layer` - the name of the image layer.
  - `dims` - to specify the dimensions names of `img`.
  - `lazy` - set to True to allow lazy computations.
  - `scale` - set this to the scaling factor between the image and the coordinates saved.

Let us see these arguments in action with a toy example.

.. GENERATED FROM PYTHON SOURCE LINES 46-53

.. code-block:: default

    arr = np.ones((100, 100, 3))
    arr[40:60, 40:60] = [0, 0.7, 1]

    print(arr.shape)
    img = sq.im.ImageContainer(arr, layer="img1")
    img





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (100, 100, 3)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    ImageContainer object with 1 layer:<p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>img1</strong>: <em>y</em> (100), <em>x</em> (100), <em>z</em> (1), <em>channels</em> (3)</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 54-57

`img` now contains one layer, `img1`. The default value of `dims` expects the image to have dimensions
``y, x, channels`` or ``y, x, z, channels``.
If the image has different dimensions, you can specify another strategy or a tuple of dimension names:

.. GENERATED FROM PYTHON SOURCE LINES 57-62

.. code-block:: default

    arr1 = arr.transpose(2, 0, 1)
    print(arr1.shape)
    img = sq.im.ImageContainer(arr1, dims=("channels", "y", "x"), layer="img1")
    img





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (3, 100, 100)


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    ImageContainer object with 1 layer:<p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>img1</strong>: <em>y</em> (100), <em>x</em> (100), <em>z</em> (1), <em>channels</em> (3)</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 63-72

Add layers to ImageContainer
----------------------------
You can add image layers into the ImageContainer using :meth:`squidpy.im.ImageContainer.add_img`.

The new layer has to share `x`, `y` (and `z`) dimensions with the already existing image.
It can have different channel dimensions. This is useful for add e.g., segmentation masks.

By default, unique layer and channel dimension names are chosen, you can specify them using the
`layer` and `dims` arguments.

.. GENERATED FROM PYTHON SOURCE LINES 72-78

.. code-block:: default

    arr_seg = np.zeros((100, 100))
    arr_seg[40:60, 40:60] = 1

    img.add_img(arr_seg, layer="seg1")
    img






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    ImageContainer object with 2 layers:<p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>img1</strong>: <em>y</em> (100), <em>x</em> (100), <em>z</em> (1), <em>channels</em> (3)</p><p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>seg1</strong>: <em>y</em> (100), <em>x</em> (100), <em>z</em> (1), <em>channels_0</em> (1)</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 79-80

For convenience, you can also assign image layers directly using the new layer name:

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: default

    img["seg2"] = arr_seg
    img






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    ImageContainer object with 3 layers:<p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>img1</strong>: <em>y</em> (100), <em>x</em> (100), <em>z</em> (1), <em>channels</em> (3)</p><p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>seg1</strong>: <em>y</em> (100), <em>x</em> (100), <em>z</em> (1), <em>channels_0</em> (1)</p><p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>seg2</strong>: <em>y</em> (100), <em>x</em> (100), <em>z</em> (1), <em>channels_1</em> (1)</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 84-86

You can get a list of layers contained in an ImageContainer, and access specific
image-structured arrays using their names:

.. GENERATED FROM PYTHON SOURCE LINES 86-89

.. code-block:: default

    print(list(img))
    img["img1"]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ['img1', 'seg1', 'seg2']


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2 {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;img1&#x27; (y: 100, x: 100, z: 1, channels: 3)&gt;
    array([[[[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            ...,

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]]],


           [[[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]],
    ...
            [[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]]],


           [[[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            ...,

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]]]])
    Coordinates:
      * z        (z) &lt;U1 &#x27;0&#x27;
    Dimensions without coordinates: y, x, channels</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'img1'</div><ul class='xr-dim-list'><li><span>y</span>: 100</li><li><span>x</span>: 100</li><li><span class='xr-has-index'>z</span>: 1</li><li><span>channels</span>: 3</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-89e1d93e-fccd-4d0b-8bb5-7b8ba1c52e7e' class='xr-array-in' type='checkbox' checked><label for='section-89e1d93e-fccd-4d0b-8bb5-7b8ba1c52e7e' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0</span></div><div class='xr-array-data'><pre>array([[[[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            ...,

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]]],


           [[[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]],
    ...
            [[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]]],


           [[[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            ...,

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]]]])</pre></div></div></li><li class='xr-section-item'><input id='section-e59a0d7b-cf35-40de-9d66-f474c4534379' class='xr-section-summary-in' type='checkbox'  checked><label for='section-e59a0d7b-cf35-40de-9d66-f474c4534379' class='xr-section-summary' >Coordinates: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>z</span></div><div class='xr-var-dims'>(z)</div><div class='xr-var-dtype'>&lt;U1</div><div class='xr-var-preview xr-preview'>&#x27;0&#x27;</div><input id='attrs-82f1d89e-028a-4e45-a603-edb4a258bf04' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-82f1d89e-028a-4e45-a603-edb4a258bf04' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-698f5320-2713-4d15-bd6f-9ff2db1512a3' class='xr-var-data-in' type='checkbox'><label for='data-698f5320-2713-4d15-bd6f-9ff2db1512a3' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;0&#x27;], dtype=&#x27;&lt;U1&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-8cf37f35-f35b-4f6c-be7d-54fb3d72a914' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-8cf37f35-f35b-4f6c-be7d-54fb3d72a914' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 90-91

Renaming of image layers is also possible using :meth:`squidpy.im.ImageContainer.rename`:

.. GENERATED FROM PYTHON SOURCE LINES 91-93

.. code-block:: default

    img.rename("seg2", "new-name")






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    ImageContainer object with 3 layers:<p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>img1</strong>: <em>y</em> (100), <em>x</em> (100), <em>z</em> (1), <em>channels</em> (3)</p><p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>seg1</strong>: <em>y</em> (100), <em>x</em> (100), <em>z</em> (1), <em>channels_0</em> (1)</p><p style='text-indent: 25px; margin-top: 0px; margin-bottom: 0px;'><strong>new-name</strong>: <em>y</em> (100), <em>x</em> (100), <em>z</em> (1), <em>channels_1</em> (1)</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 94-102

Visualization
-------------
Use :meth:`squidpy.im.ImageContainer.show` to visualize (small) images statically.
See :ref:`sphx_glr_auto_examples_image_compute_show.py` for more details.

For large images and for interactive visualization of :class:`squidpy.im.ImageContainer` together with
spatial 'omics data, we recommend using :meth:`squidpy.im.ImageContainer.interactive`, which uses Napari.
See `Interactive visualization with Napari <../external_tutorials/tutorial_napari.ipynb>`_ for more details.

.. GENERATED FROM PYTHON SOURCE LINES 102-104

.. code-block:: default

    img.show(layer="img1")




.. image:: /auto_tutorials/images/sphx_glr_tutorial_image_container_001.png
    :alt: img1
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 105-110

Crop and scale images
---------------------
Images can be cropped and scaled using :meth:`squidpy.im.ImageContainer.crop_corner` and
:meth:`squidpy.im.ImageContainer.crop_center`.
See :ref:`sphx_glr_auto_examples_image_compute_crops.py` for more details.

.. GENERATED FROM PYTHON SOURCE LINES 110-116

.. code-block:: default

    crop1 = img.crop_corner(30, 40, size=(30, 30), scale=1)
    crop1.show(layer="img1")

    crop2 = crop1.crop_corner(0, 0, size=(40, 40), scale=0.5)
    crop2.show(layer="img1")




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_tutorial_image_container_002.png
          :alt: img1
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_tutorial_image_container_003.png
          :alt: img1
          :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 117-124

Internally, the `ImageContainer` keeps track of the crop coordinates in the dataset attributes.
This enables mapping from cropped `ImageContainers` to observations in `adata` for interactive
visualization and feature extraction.

Using :meth:`squidpy.im.ImageContainer.uncrop`, we can reconstruct the original image.
Even when chaining multiple calls to ``crop``, ``uncrop`` correctly places the crop in the image.
Note that ``uncrop`` only undoes the cropping, not the scaling.

.. GENERATED FROM PYTHON SOURCE LINES 124-130

.. code-block:: default

    print(crop1.data.attrs)
    print(crop2.data.attrs)

    sq.im.ImageContainer.uncrop([crop1], shape=img.shape).show(layer="img1")
    sq.im.ImageContainer.uncrop([crop2], shape=(50, 50)).show(layer="img1")




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_tutorials/images/sphx_glr_tutorial_image_container_004.png
          :alt: img1
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_tutorials/images/sphx_glr_tutorial_image_container_005.png
          :alt: img1
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'coords': CropCoords(x0=40, y0=30, x1=70, y1=60), 'padding': CropPadding(x_pre=0, x_post=0, y_pre=0, y_post=0), 'scale': 1.0, 'mask_circle': False}
    {'coords': CropCoords(x0=20.0, y0=15.0, x1=35.0, y1=30.0), 'padding': CropPadding(x_pre=0.0, x_post=5.0, y_pre=0.0, y_post=5.0), 'scale': 0.5, 'mask_circle': False}




.. GENERATED FROM PYTHON SOURCE LINES 131-133

After cropping the ImageContainer, you can subset the associated `adata` to the cropped image using
:meth:`squidpy.im.ImageContainer.subset`. See :ref:`sphx_glr_auto_examples_image_compute_crops.py` for an example.

.. GENERATED FROM PYTHON SOURCE LINES 135-161

Processing images and extracting features
-----------------------------------------
The main purpose of ImageContainer is to allow efficient image processing, segmentation and features extraction.

For details on each of these steps, have a look a the following examples using the high-level API:

  - :ref:`sphx_glr_auto_examples_image_compute_process_hires.py` for :func:`sq.im.process`.
  - :ref:`sphx_glr_auto_examples_image_compute_segment_fluo.py` for :func:`sq.im.segment`.
  - :ref:`sphx_glr_auto_examples_image_compute_features.py` for :func:`sq.im.extract_features`.

These functions are build to be general and flexible. All of them allow you to pass custom processing and
feature extraction functions for easy use of external packages with Squidpy.

For even more control, you can also use low-level functions provided by `ImageContainer`:

  - :meth:`sq.im.ImageContainer.apply` for custom processing functions that should be applied to a
    specific image layer.
  - :meth:`sq.im.ImageContainner.feature_custom` for extracting features.

There are two generators, that allow you to iterate over a sequence of image crops and apply
processing functions to smaller crops (e.g. to allow parallelization or processing images
that won't fit in memory:

  - :meth:`sq.im.ImageContainer.generate_equal_crops`, for evenly decomposing the image into equally sized crops.
  - :meth:`sq.im.ImageContainer.generate_spot_crops`, for extracting image crops for each observation in the
    associated `adata`.

.. GENERATED FROM PYTHON SOURCE LINES 163-167

Internal representation of images
---------------------------------
Internally, the images are represented in a :class:`xarray.Dataset`. You can access this dataset using
:attr:`img.data`.

.. GENERATED FROM PYTHON SOURCE LINES 167-169

.. code-block:: default

    img.data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2 {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
    Dimensions:   (channels: 3, channels_0: 1, channels_1: 1, x: 100, y: 100, z: 1)
    Coordinates:
      * z         (z) &lt;U1 &#x27;0&#x27;
    Dimensions without coordinates: channels, channels_0, channels_1, x, y
    Data variables:
        img1      (y, x, z, channels) float64 1.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 1.0
        seg1      (y, x, z, channels_0) float64 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0
        new-name  (y, x, z, channels_1) float64 0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0
    Attributes:
        coords:       CropCoords(x0=0, y0=0, x1=0, y1=0)
        padding:      CropPadding(x_pre=0, x_post=0, y_pre=0, y_post=0)
        scale:        1.0
        mask_circle:  False</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-88dfad0f-f874-4035-a58f-898f70f91334' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-88dfad0f-f874-4035-a58f-898f70f91334' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span>channels</span>: 3</li><li><span>channels_0</span>: 1</li><li><span>channels_1</span>: 1</li><li><span>x</span>: 100</li><li><span>y</span>: 100</li><li><span class='xr-has-index'>z</span>: 1</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-7ca689f2-c315-4d3a-8c14-f2550ebc83ec' class='xr-section-summary-in' type='checkbox'  checked><label for='section-7ca689f2-c315-4d3a-8c14-f2550ebc83ec' class='xr-section-summary' >Coordinates: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>z</span></div><div class='xr-var-dims'>(z)</div><div class='xr-var-dtype'>&lt;U1</div><div class='xr-var-preview xr-preview'>&#x27;0&#x27;</div><input id='attrs-6a0d9d9c-a41f-4680-aca9-8ee8d846646f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-6a0d9d9c-a41f-4680-aca9-8ee8d846646f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c45bad4f-d0d2-4c50-9f05-33e89498b653' class='xr-var-data-in' type='checkbox'><label for='data-c45bad4f-d0d2-4c50-9f05-33e89498b653' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;0&#x27;], dtype=&#x27;&lt;U1&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-3f0b7901-7c80-44a3-a275-1813ffb26aaa' class='xr-section-summary-in' type='checkbox'  checked><label for='section-3f0b7901-7c80-44a3-a275-1813ffb26aaa' class='xr-section-summary' >Data variables: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>img1</span></div><div class='xr-var-dims'>(y, x, z, channels)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 1.0</div><input id='attrs-31f9f46e-ccaa-47cd-8d1a-43d32456690e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-31f9f46e-ccaa-47cd-8d1a-43d32456690e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-fae2ab17-844a-441e-a00c-c4b04c687074' class='xr-var-data-in' type='checkbox'><label for='data-fae2ab17-844a-441e-a00c-c4b04c687074' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            ...,

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]]],


           [[[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]],
    ...
            [[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]]],


           [[[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            ...,

            [[1., 1., 1.]],

            [[1., 1., 1.]],

            [[1., 1., 1.]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>seg1</span></div><div class='xr-var-dims'>(y, x, z, channels_0)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id='attrs-bcdc2ebb-b0b5-4444-8ca6-5d6443ed59ea' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-bcdc2ebb-b0b5-4444-8ca6-5d6443ed59ea' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-84b44591-a171-454f-b2e0-a4d716a984c7' class='xr-var-data-in' type='checkbox'><label for='data-84b44591-a171-454f-b2e0-a4d716a984c7' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[0.]],

            [[0.]],

            [[0.]],

            ...,

            [[0.]],

            [[0.]],

            [[0.]]],


           [[[0.]],

            [[0.]],

            [[0.]],
    ...
            [[0.]],

            [[0.]],

            [[0.]]],


           [[[0.]],

            [[0.]],

            [[0.]],

            ...,

            [[0.]],

            [[0.]],

            [[0.]]]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>new-name</span></div><div class='xr-var-dims'>(y, x, z, channels_1)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0 0.0 0.0 0.0 ... 0.0 0.0 0.0 0.0</div><input id='attrs-d6d46347-6cd1-42c0-bcbf-d7968be720db' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-d6d46347-6cd1-42c0-bcbf-d7968be720db' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7018e42b-f5c5-4e2c-bc89-7f9bf7e4bb25' class='xr-var-data-in' type='checkbox'><label for='data-7018e42b-f5c5-4e2c-bc89-7f9bf7e4bb25' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[[[0.]],

            [[0.]],

            [[0.]],

            ...,

            [[0.]],

            [[0.]],

            [[0.]]],


           [[[0.]],

            [[0.]],

            [[0.]],
    ...
            [[0.]],

            [[0.]],

            [[0.]]],


           [[[0.]],

            [[0.]],

            [[0.]],

            ...,

            [[0.]],

            [[0.]],

            [[0.]]]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-ac00d5da-3055-425d-a3c0-76053a15a7c1' class='xr-section-summary-in' type='checkbox'  checked><label for='section-ac00d5da-3055-425d-a3c0-76053a15a7c1' class='xr-section-summary' >Attributes: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>coords :</span></dt><dd>CropCoords(x0=0, y0=0, x1=0, y1=0)</dd><dt><span>padding :</span></dt><dd>CropPadding(x_pre=0, x_post=0, y_pre=0, y_post=0)</dd><dt><span>scale :</span></dt><dd>1.0</dd><dt><span>mask_circle :</span></dt><dd>False</dd></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 170-175

Whenever possible, images are represented as lazy :mod:`dask` arrays.
This allows lazy computations, which only load and compute the data when it is required.

Let us load an on-disk image that is provided by the :mod:`squidpy.datasets` module:
By default, the `lazy` argument is `True`, therefore resulting in a :class:`dask.array.Array`.

.. GENERATED FROM PYTHON SOURCE LINES 175-178

.. code-block:: default

    img_on_disk = sq.datasets.visium_hne_image()
    print(type(img_on_disk["image"].data))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <class 'dask.array.core.Array'>




.. GENERATED FROM PYTHON SOURCE LINES 179-180

We can use :meth:`squidpy.im.ImageContainer.compute` to force loading of the data:

.. GENERATED FROM PYTHON SOURCE LINES 180-183

.. code-block:: default

    img_on_disk.compute()
    print(type(img_on_disk["image"].data))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <class 'numpy.ndarray'>




.. GENERATED FROM PYTHON SOURCE LINES 184-186

ImageContainers can be saved and loaded from a *Zarr* store, using :meth:`squidpy.im.ImageContainer.save` and
:meth:`squidpy.im.ImageContainer.load`.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.331 seconds)

**Estimated memory usage:**  423 MB


.. _sphx_glr_download_auto_tutorials_tutorial_image_container.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_image_container.py <tutorial_image_container.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_image_container.ipynb <tutorial_image_container.ipynb>`
