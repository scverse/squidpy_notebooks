
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_imc.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_tutorials/tutorial_imc.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_imc.py:

Analyze Imaging Mass Cytometry data
===================================

This tutorial shows how to apply Squidpy to Imaging Mass Cytometry data.

The data used here comes from a recent paper from :cite:`jackson2020single`.
We provide a pre-processed subset of the data, in :class:`anndata.AnnData` format.
For details on how it was pre-processed, please refer to the original paper.

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_seqfish.py` for additional analysis examples.

Import packages & data
----------------------
To run the notebook locally, create a conda environment as *conda env create -f environment.yml* using this
`environment.yml <https://github.com/theislab/squidpy_notebooks/blob/master/environment.yml>`_.

.. GENERATED FROM PYTHON SOURCE LINES 21-31

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    sc.logging.print_header()
    print(f"squidpy=={sq.__version__}")

    # load the pre-processed dataset
    adata = sq.datasets.imc()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scanpy==1.8.0 anndata==0.7.6 umap==0.5.1 numpy==1.21.0 scipy==1.7.0 pandas==1.2.5 scikit-learn==0.24.2 statsmodels==0.12.2 python-igraph==0.9.6 pynndescent==0.5.2
    squidpy==1.0.1
      0%|          | 0.00/1.50M [00:00<?, ?B/s]      4%|3         | 56.0k/1.50M [00:00<00:03, 413kB/s]      9%|9         | 144k/1.50M [00:00<00:02, 548kB/s]      35%|###4      | 536k/1.50M [00:00<00:00, 1.60MB/s]    100%|##########| 1.50M/1.50M [00:00<00:00, 3.19MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 32-34

First, let's visualize the cluster annotation in spatial context
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: default

    sc.pl.spatial(adata, color="cell type", spot_size=10)




.. image:: /auto_tutorials/images/sphx_glr_tutorial_imc_001.png
    :alt: cell type
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 37-43

We can appreciate how the majority of the tissue seems
to consist of *apoptotic tumor cells*. There also seem to be other
cell types scattered across the tissue, annotated as *T cells*,
*Macrophages* and different types of *Stromal cells*. We can also
appreciate how a subset of tumor cell, *basal CK tumor cells* seems
to be located in the lower part of the tissue.

.. GENERATED FROM PYTHON SOURCE LINES 45-68

Co-occurrence across spatial dimensions
+++++++++++++++++++++++++++++++++++++++

We can visualize cluster co-occurrence in spatial dimensions using the original
spatial coordinates.
The co-occurrence score is defined as:

.. math::

    \frac{p(exp|cond)}{p(exp)}

where :math:`p(exp|cond)` is the conditional probability of observing a
cluster :math:`exp` conditioned on the presence of a cluster :math:`cond`, whereas
:math:`p(exp)` is the probability of observing :math:`exp` in the radius size
of interest. The score is computed across increasing radii size
around each cell in the tissue.

We can compute this score with :func:`squidpy.gr.co_occurrence`
and set the cluster annotation for the conditional probability with
the argument ``clusters``. Then, we visualize the results with
:func:`squidpy.pl.co_occurrence`.
We visualize the result for two conditional groups, namely
*basal CK tumor cell* and *T cells*.

.. GENERATED FROM PYTHON SOURCE LINES 68-76

.. code-block:: default

    sq.gr.co_occurrence(adata, cluster_key="cell type")
    sq.pl.co_occurrence(
        adata,
        cluster_key="cell type",
        clusters=["basal CK tumor cell", "T cells"],
        figsize=(15, 4),
    )




.. image:: /auto_tutorials/images/sphx_glr_tutorial_imc_002.png
    :alt: $\frac{p(exp|T cells)}{p(exp)}$, $\frac{p(exp|basal CK tumor cell)}{p(exp)}$
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1 [00:00<?, ?/s]    100%|##########| 1/1 [00:02<00:00,  2.43s/]    100%|##########| 1/1 [00:02<00:00,  2.43s/]
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 77-82

We can observe that *T cells* seems to co-occur
with *endothelial* and *vimentin hi stromal cells*,
whereas *basal CK tumor cell* seem to largely cluster
together, except for the presence of a type of stromal
cells (*small elongated stromal cell*) at close distance.

.. GENERATED FROM PYTHON SOURCE LINES 84-103

Neighborhood enrichment
+++++++++++++++++++++++
A similar analysis that can inform on the neighbor structure of
the tissue is the *neighborhood enrichment test*.
You can compute such score with the following function: :func:`squidpy.gr.nhood_enrichment`.
In short, it's an enrichment score on spatial proximity of clusters:
if spots belonging to two different clusters are often close to each other,
then they will have a high score and can be defined as being *enriched*.
On the other hand, if they are far apart, the score will be low
and they can be defined as *depleted*.
This score is based on a permutation-based test, and you can set
the number of permutations with the ``n_perms`` argument (default is 1000).

Since the function works on a connectivity matrix, we need to compute that as well.
This can be done with :func:`squidpy.gr.spatial_neighbors`.
Please see :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for more details
of how this function works.

Finally, we visualize the results with :func:`squidpy.pl.nhood_enrichment`.

.. GENERATED FROM PYTHON SOURCE LINES 103-107

.. code-block:: default

    sq.gr.spatial_neighbors(adata)
    sq.gr.nhood_enrichment(adata, cluster_key="cell type")
    sq.pl.nhood_enrichment(adata, cluster_key="cell type")




.. image:: /auto_tutorials/images/sphx_glr_tutorial_imc_003.png
    :alt: Neighborhood enrichment
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.
      self._set_arrayXarray(i, j, x)
      0%|          | 0/1000 [00:00<?, ?/s]      9%|8         | 89/1000 [00:00<00:01, 878.07/s]     18%|#8        | 185/1000 [00:00<00:00, 920.27/s]     28%|##8       | 283/1000 [00:00<00:00, 945.54/s]     40%|####      | 403/1000 [00:00<00:00, 1040.05/s]     66%|######6   | 665/1000 [00:00<00:00, 1601.01/s]     93%|#########3| 933/1000 [00:00<00:00, 1964.88/s]    100%|##########| 1000/1000 [00:00<00:00, 1633.00/s]




.. GENERATED FROM PYTHON SOURCE LINES 108-117

Interestingly, *T cells* shows an enrichment with *stromal* and
*endothelial cells*, as well as *macrophages*. Another interesting
result is that *apoptotic tumor cells*, being uniformly spread across
the tissue area, show a neighbor depletion against any other cluster
(but a strong enrichment for itself). This is a correct interpretation
from a permutation based approach, because the cluster annotation,
being uniformly spread across the tissue, and in high number, it's
more likely to be enriched with cell types from the same class,
rather than different one.

.. GENERATED FROM PYTHON SOURCE LINES 119-126

Interaction matrix and network centralities
+++++++++++++++++++++++++++++++++++++++++++
Squidpy provides other descriptive statistics of the spatial graph.
For instance, the interaction matrix, which counts the number of edges
that each cluster share with all the others.
This score can be computed with the function :func:`squidpy.gr.interaction_matrix`.
We can visualize the results with  :func:`squidpy.pl.interaction_matrix`.

.. GENERATED FROM PYTHON SOURCE LINES 126-129

.. code-block:: default

    sq.gr.interaction_matrix(adata, cluster_key="cell type")
    sq.pl.interaction_matrix(adata, cluster_key="cell type")




.. image:: /auto_tutorials/images/sphx_glr_tutorial_imc_004.png
    :alt: Interaction matrix
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 130-141

Finally, similar to the previous analysis,
we can investigate properties of the spatial graph by
computing different network centralities:

  - degree_centrality.
  - average_clustering.
  - closeness_centrality.

Squidpy provides a convenient function for all of them:
:func:`squidpy.gr.centrality_scores` and
:func:`squidpy.pl.centrality_scores` for visualization.

.. GENERATED FROM PYTHON SOURCE LINES 141-147

.. code-block:: default

    sq.gr.centrality_scores(
        adata,
        cluster_key="cell type",
    )
    sq.pl.centrality_scores(adata, cluster_key="cell type", figsize=(20, 5), s=500)




.. image:: /auto_tutorials/images/sphx_glr_tutorial_imc_005.png
    :alt: Average clustering, Closeness centrality, Degree centrality
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 148-154

You can familiarize yourself with network centralities from the
excellent :mod:`networkx`
`documentation <https://networkx.org/documentation/stable/reference/algorithms/centrality>`_ .
For the purpose of this analysis, we can appreciate that the *apoptotic tumor cell*
clusters shows high closeness centrality, indicating that nodes belonging to that group
are often close to each other in the spatial graph.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  27.050 seconds)

**Estimated memory usage:**  12 MB


.. _sphx_glr_download_auto_tutorials_tutorial_imc.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_imc.py <tutorial_imc.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_imc.ipynb <tutorial_imc.ipynb>`
