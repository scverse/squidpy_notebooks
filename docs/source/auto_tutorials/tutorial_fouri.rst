
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_fouri.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scverse/squidpy_notebooks/main?filepath=docs/source/auto_tutorials/tutorial_fouri.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_fouri.py:

Analyze 4i data
===============

This tutorial shows how to apply Squidpy for the analysis of 4i data.

The data used here was obtained from :cite:`Gut2018-ap`.
We provide a pre-processed subset of the data, in :class:`anndata.AnnData` format.
For details on how it was pre-processed, please refer to the original paper.

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_imc.py` for additional analysis examples.

Import packages & data
----------------------
To run the notebook locally, create a conda environment as *conda env create -f environment.yml* using this
`environment.yml <https://github.com/scverse/squidpy_notebooks/blob/main/environment.yml>`_.

.. GENERATED FROM PYTHON SOURCE LINES 21-31

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    sc.logging.print_header()
    print(f"squidpy=={sq.__version__}")

    # load the pre-processed dataset
    adata = sq.datasets.four_i()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scanpy==1.9.1 anndata==0.8.0 umap==0.5.3 numpy==1.22.4 scipy==1.8.1 pandas==1.4.2 scikit-learn==1.1.1 statsmodels==0.13.2 python-igraph==0.9.11 pynndescent==0.5.7
    squidpy==1.2.2
    /Users/giovanni.palla/Projects/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1830: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
      utils.warn_names_duplicates("var")




.. GENERATED FROM PYTHON SOURCE LINES 32-34

First, let's visualize cluster annotation in spatial context
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default

    sc.pl.spatial(adata, color="cluster", spot_size=1)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
   :alt: cluster
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 38-58

Neighborhood enrichment analysis
--------------------------------
Similar to other spatial data, we can investigate spatial organization of clusters
in a quantitative way, by computing a neighborhood enrichment score.
You can compute such score with the following function: :func:`squidpy.gr.nhood_enrichment`.
In short, it's an enrichment score on spatial proximity of clusters:
if spots belonging to two different clusters are often close to each other,
then they will have a high score and can be defined as being *enriched*.
On the other hand, if they are far apart, the score will be low
and they can be defined as *depleted*.
This score is based on a permutation-based test, and you can set
the number of permutations with the `n_perms` argument (default is 1000).

Since the function works on a connectivity matrix, we need to compute that as well.
This can be done with :func:`squidpy.gr.spatial_neighbors`.
Please see :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for more details
of how this function works.

Finally, we'll directly visualize the results with :func:`squidpy.pl.nhood_enrichment`.
We'll add a dendrogram to the heatmap computed with linkage method *ward*.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default

    sq.gr.spatial_neighbors(adata, coord_type="generic")
    sq.gr.nhood_enrichment(adata, cluster_key="cluster")
    sq.pl.nhood_enrichment(adata, cluster_key="cluster", method="ward", vmin=-100, vmax=100)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
   :alt: Neighborhood enrichment
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1000 [00:00<?, ?/s]      0%|          | 1/1000 [00:08<2:22:05,  8.53s/]      1%|          | 6/1000 [00:08<17:41,  1.07s/]        1%|1         | 10/1000 [00:08<09:00,  1.83/s]      2%|1         | 15/1000 [00:08<04:53,  3.35/s]      2%|2         | 20/1000 [00:08<03:04,  5.30/s]      2%|2         | 24/1000 [00:09<02:13,  7.29/s]      3%|2         | 28/1000 [00:09<01:40,  9.65/s]      3%|3         | 33/1000 [00:09<01:12, 13.35/s]      4%|3         | 37/1000 [00:09<00:58, 16.39/s]      4%|4         | 42/1000 [00:09<00:45, 21.23/s]      5%|4         | 47/1000 [00:09<00:37, 25.61/s]      5%|5         | 52/1000 [00:09<00:32, 28.91/s]      6%|5         | 57/1000 [00:09<00:29, 32.08/s]      6%|6         | 62/1000 [00:09<00:26, 34.84/s]      7%|6         | 67/1000 [00:10<00:26, 35.85/s]      7%|7         | 72/1000 [00:10<00:24, 38.46/s]      8%|7         | 77/1000 [00:10<00:24, 38.25/s]      8%|8         | 83/1000 [00:10<00:22, 39.99/s]      9%|8         | 88/1000 [00:10<00:22, 41.09/s]      9%|9         | 94/1000 [00:10<00:20, 44.39/s]     10%|9         | 99/1000 [00:10<00:21, 41.49/s]     10%|#         | 104/1000 [00:11<00:22, 39.80/s]     11%|#         | 109/1000 [00:11<00:23, 38.28/s]     11%|#1        | 114/1000 [00:11<00:22, 39.44/s]     12%|#1        | 119/1000 [00:11<00:21, 40.26/s]     12%|#2        | 124/1000 [00:11<00:22, 38.11/s]     13%|#2        | 129/1000 [00:11<00:23, 37.62/s]     13%|#3        | 133/1000 [00:11<00:24, 36.08/s]     14%|#3        | 137/1000 [00:11<00:27, 31.02/s]     14%|#4        | 141/1000 [00:12<00:36, 23.86/s]     14%|#4        | 145/1000 [00:12<00:32, 26.60/s]     15%|#4        | 149/1000 [00:12<00:28, 29.37/s]     15%|#5        | 154/1000 [00:12<00:27, 31.09/s]     16%|#5        | 158/1000 [00:12<00:28, 29.64/s]     16%|#6        | 162/1000 [00:12<00:33, 25.10/s]     16%|#6        | 165/1000 [00:13<00:37, 22.16/s]     17%|#6        | 169/1000 [00:13<00:33, 24.56/s]     17%|#7        | 173/1000 [00:13<00:29, 27.77/s]     18%|#7        | 177/1000 [00:13<00:28, 28.80/s]     18%|#8        | 182/1000 [00:13<00:25, 32.64/s]     19%|#8        | 186/1000 [00:13<00:24, 33.90/s]     19%|#9        | 191/1000 [00:13<00:22, 35.73/s]     20%|#9        | 197/1000 [00:13<00:20, 39.98/s]     20%|##        | 202/1000 [00:14<00:19, 40.44/s]     21%|##        | 207/1000 [00:14<00:19, 40.13/s]     21%|##1       | 212/1000 [00:14<00:22, 35.32/s]     22%|##1       | 216/1000 [00:14<00:22, 34.29/s]     22%|##2       | 221/1000 [00:14<00:21, 36.42/s]     23%|##2       | 226/1000 [00:14<00:19, 39.22/s]     23%|##3       | 231/1000 [00:14<00:19, 39.86/s]     24%|##3       | 237/1000 [00:14<00:17, 42.55/s]     24%|##4       | 242/1000 [00:15<00:17, 42.31/s]     25%|##4       | 247/1000 [00:15<00:17, 43.93/s]     25%|##5       | 252/1000 [00:15<00:16, 44.43/s]     26%|##5       | 257/1000 [00:15<00:16, 43.83/s]     26%|##6       | 262/1000 [00:15<00:16, 44.97/s]     27%|##6       | 267/1000 [00:15<00:15, 46.13/s]     27%|##7       | 272/1000 [00:15<00:16, 44.73/s]     28%|##7       | 278/1000 [00:15<00:15, 46.96/s]     28%|##8       | 283/1000 [00:16<00:15, 45.71/s]     29%|##8       | 288/1000 [00:16<00:15, 46.46/s]     29%|##9       | 293/1000 [00:16<00:15, 46.96/s]     30%|##9       | 298/1000 [00:16<00:15, 46.44/s]     30%|###       | 303/1000 [00:16<00:14, 46.50/s]     31%|###       | 308/1000 [00:16<00:15, 45.27/s]     31%|###1      | 314/1000 [00:16<00:14, 46.28/s]     32%|###2      | 320/1000 [00:16<00:14, 47.99/s]     32%|###2      | 325/1000 [00:16<00:14, 46.28/s]     33%|###3      | 330/1000 [00:17<00:14, 46.44/s]     34%|###3      | 335/1000 [00:17<00:14, 46.56/s]     34%|###4      | 340/1000 [00:17<00:15, 43.46/s]     34%|###4      | 345/1000 [00:17<00:16, 40.79/s]     35%|###5      | 350/1000 [00:17<00:15, 41.10/s]     36%|###5      | 355/1000 [00:17<00:15, 42.94/s]     36%|###6      | 361/1000 [00:17<00:14, 44.90/s]     37%|###6      | 367/1000 [00:17<00:13, 47.33/s]     37%|###7      | 372/1000 [00:17<00:13, 47.87/s]     38%|###7      | 377/1000 [00:18<00:12, 48.36/s]     38%|###8      | 382/1000 [00:18<00:12, 48.05/s]     39%|###8      | 387/1000 [00:18<00:13, 46.89/s]     39%|###9      | 392/1000 [00:18<00:13, 46.28/s]     40%|###9      | 397/1000 [00:18<00:12, 46.84/s]     40%|####      | 403/1000 [00:18<00:12, 47.62/s]     41%|####      | 409/1000 [00:18<00:12, 49.21/s]     41%|####1     | 414/1000 [00:18<00:12, 46.58/s]     42%|####2     | 420/1000 [00:18<00:11, 48.62/s]     43%|####2     | 426/1000 [00:19<00:12, 47.43/s]     43%|####3     | 431/1000 [00:19<00:11, 47.75/s]     44%|####3     | 436/1000 [00:19<00:11, 47.69/s]     44%|####4     | 441/1000 [00:19<00:12, 46.19/s]     45%|####4     | 447/1000 [00:19<00:11, 46.41/s]     45%|####5     | 453/1000 [00:19<00:11, 48.69/s]     46%|####5     | 458/1000 [00:19<00:11, 46.62/s]     46%|####6     | 463/1000 [00:19<00:11, 45.87/s]     47%|####6     | 468/1000 [00:20<00:12, 41.61/s]     47%|####7     | 473/1000 [00:20<00:12, 42.00/s]     48%|####7     | 478/1000 [00:20<00:11, 43.73/s]     48%|####8     | 483/1000 [00:20<00:12, 42.46/s]     49%|####8     | 489/1000 [00:20<00:11, 45.08/s]     49%|####9     | 494/1000 [00:20<00:11, 43.95/s]     50%|#####     | 500/1000 [00:20<00:10, 45.81/s]     50%|#####     | 505/1000 [00:20<00:10, 46.15/s]     51%|#####1    | 510/1000 [00:20<00:10, 44.64/s]     52%|#####1    | 515/1000 [00:21<00:10, 44.96/s]     52%|#####2    | 521/1000 [00:21<00:10, 46.64/s]     53%|#####2    | 526/1000 [00:21<00:10, 46.78/s]     53%|#####3    | 531/1000 [00:21<00:10, 44.70/s]     54%|#####3    | 536/1000 [00:21<00:10, 45.45/s]     54%|#####4    | 541/1000 [00:21<00:09, 46.04/s]     55%|#####4    | 546/1000 [00:21<00:09, 46.75/s]     55%|#####5    | 552/1000 [00:21<00:09, 46.72/s]     56%|#####5    | 558/1000 [00:21<00:08, 49.16/s]     56%|#####6    | 563/1000 [00:22<00:09, 46.91/s]     57%|#####6    | 568/1000 [00:22<00:09, 46.45/s]     57%|#####7    | 574/1000 [00:22<00:08, 48.00/s]     58%|#####7    | 579/1000 [00:22<00:09, 45.79/s]     58%|#####8    | 585/1000 [00:22<00:08, 47.54/s]     59%|#####8    | 590/1000 [00:22<00:08, 47.33/s]     60%|#####9    | 595/1000 [00:22<00:08, 45.55/s]     60%|######    | 600/1000 [00:22<00:08, 46.04/s]     61%|######    | 606/1000 [00:23<00:08, 47.85/s]     61%|######1   | 611/1000 [00:23<00:08, 45.86/s]     62%|######1   | 616/1000 [00:23<00:08, 46.57/s]     62%|######2   | 621/1000 [00:23<00:08, 46.20/s]     63%|######2   | 626/1000 [00:23<00:08, 46.48/s]     63%|######3   | 631/1000 [00:23<00:07, 46.33/s]     64%|######3   | 637/1000 [00:23<00:07, 47.86/s]     64%|######4   | 642/1000 [00:23<00:07, 46.07/s]     65%|######4   | 648/1000 [00:23<00:07, 46.65/s]     65%|######5   | 654/1000 [00:24<00:07, 46.92/s]     66%|######6   | 660/1000 [00:24<00:07, 48.32/s]     66%|######6   | 665/1000 [00:24<00:06, 48.11/s]     67%|######7   | 670/1000 [00:24<00:07, 41.99/s]     68%|######7   | 675/1000 [00:24<00:08, 40.05/s]     68%|######8   | 681/1000 [00:24<00:07, 43.30/s]     69%|######8   | 686/1000 [00:24<00:07, 42.29/s]     69%|######9   | 691/1000 [00:24<00:07, 43.23/s]     70%|######9   | 697/1000 [00:25<00:06, 45.38/s]     70%|#######   | 702/1000 [00:25<00:06, 45.30/s]     71%|#######   | 707/1000 [00:25<00:06, 42.96/s]     71%|#######1  | 713/1000 [00:25<00:06, 45.06/s]     72%|#######1  | 718/1000 [00:25<00:06, 44.14/s]     72%|#######2  | 724/1000 [00:25<00:05, 46.09/s]     73%|#######2  | 729/1000 [00:25<00:06, 45.14/s]     74%|#######3  | 735/1000 [00:25<00:05, 45.70/s]     74%|#######4  | 740/1000 [00:25<00:05, 45.22/s]     74%|#######4  | 745/1000 [00:26<00:05, 45.85/s]     75%|#######5  | 750/1000 [00:26<00:05, 44.43/s]     76%|#######5  | 756/1000 [00:26<00:05, 43.97/s]     76%|#######6  | 762/1000 [00:26<00:05, 45.33/s]     77%|#######6  | 767/1000 [00:26<00:05, 45.13/s]     77%|#######7  | 772/1000 [00:26<00:04, 45.83/s]     78%|#######7  | 777/1000 [00:26<00:04, 45.92/s]     78%|#######8  | 782/1000 [00:26<00:04, 46.30/s]     79%|#######8  | 787/1000 [00:27<00:04, 45.00/s]     79%|#######9  | 792/1000 [00:27<00:04, 45.49/s]     80%|#######9  | 797/1000 [00:27<00:04, 46.51/s]     80%|########  | 802/1000 [00:27<00:04, 44.42/s]     81%|########  | 807/1000 [00:27<00:04, 44.95/s]     81%|########1 | 813/1000 [00:27<00:03, 46.91/s]     82%|########1 | 818/1000 [00:27<00:03, 46.92/s]     82%|########2 | 823/1000 [00:27<00:04, 41.31/s]     83%|########2 | 828/1000 [00:27<00:04, 39.15/s]     83%|########3 | 833/1000 [00:28<00:04, 40.87/s]     84%|########3 | 839/1000 [00:28<00:03, 42.46/s]     84%|########4 | 844/1000 [00:28<00:03, 43.67/s]     85%|########4 | 849/1000 [00:28<00:03, 44.31/s]     86%|########5 | 855/1000 [00:28<00:03, 46.68/s]     86%|########6 | 860/1000 [00:28<00:03, 45.34/s]     87%|########6 | 866/1000 [00:28<00:02, 45.83/s]     87%|########7 | 872/1000 [00:28<00:02, 45.90/s]     88%|########7 | 877/1000 [00:29<00:02, 46.00/s]     88%|########8 | 883/1000 [00:29<00:02, 47.58/s]     89%|########8 | 888/1000 [00:29<00:02, 46.06/s]     89%|########9 | 894/1000 [00:29<00:02, 47.63/s]     90%|########9 | 899/1000 [00:29<00:02, 45.90/s]     90%|######### | 905/1000 [00:29<00:02, 45.83/s]     91%|#########1| 910/1000 [00:29<00:01, 46.79/s]     92%|#########1| 915/1000 [00:29<00:01, 45.59/s]     92%|#########2| 920/1000 [00:29<00:01, 44.52/s]     93%|#########2| 926/1000 [00:30<00:01, 45.83/s]     93%|#########3| 931/1000 [00:30<00:01, 45.99/s]     94%|#########3| 936/1000 [00:30<00:01, 46.17/s]     94%|#########4| 941/1000 [00:30<00:01, 44.23/s]     95%|#########4| 946/1000 [00:30<00:01, 45.00/s]     95%|#########5| 952/1000 [00:30<00:01, 45.89/s]     96%|#########5| 958/1000 [00:30<00:00, 47.44/s]     96%|#########6| 963/1000 [00:30<00:00, 47.24/s]     97%|#########6| 968/1000 [00:31<00:00, 45.50/s]     97%|#########7| 973/1000 [00:31<00:00, 45.84/s]     98%|#########7| 978/1000 [00:31<00:00, 45.48/s]     98%|#########8| 983/1000 [00:31<00:00, 45.34/s]     99%|#########8| 988/1000 [00:31<00:00, 45.56/s]     99%|#########9| 994/1000 [00:31<00:00, 46.71/s]    100%|#########9| 999/1000 [00:31<00:00, 47.19/s]    100%|##########| 1000/1000 [00:31<00:00, 31.54/s]




.. GENERATED FROM PYTHON SOURCE LINES 64-68

A similar analysis can be performed with :func:`squidpy.gr.interaction_matrix`.
The function computes the number of shared edges in the neighbor graph between clusters.
Please see :ref:`sphx_glr_auto_examples_graph_compute_interaction_matrix.py` for more details
of how this function works.

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: default

    sq.gr.interaction_matrix(adata, cluster_key="cluster")
    sq.pl.interaction_matrix(adata, cluster_key="cluster", method="ward", vmax=20000)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
   :alt: Interaction matrix
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-88

Additional analyses to gain quantitative understanding of spatial patterning of
sub-cellular observations are:
- :ref:`sphx_glr_auto_examples_graph_compute_ripley.py` for Ripley's statistics.
- :ref:`sphx_glr_auto_examples_graph_compute_co_occurrence.py` for co-occurrence score.

Spatially variable genes with spatial autocorrelation statistics
----------------------------------------------------------------
With Squidpy we can investigate spatial variability of gene expression.
This is an example of a function that only supports 2D data.
:func:`squidpy.gr.spatial_autocorr` conveniently wraps two
spatial autocorrelation statistics: *Moran's I* and *Geary's C*.
They provide a score on the degree of spatial variability of gene expression.
The statistic as well as the p-value are computed for each gene, and FDR correction
is performed. For the purpose of this tutorial, let's compute the *Moran's I* score.
See :ref:`sphx_glr_auto_examples_graph_compute_moran.py` for more details.

.. GENERATED FROM PYTHON SOURCE LINES 88-93

.. code-block:: default


    adata.var_names_make_unique()
    sq.gr.spatial_autocorr(adata, mode="moran")
    adata.uns["moranI"].head(10)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>I</th>
          <th>pval_norm</th>
          <th>var_norm</th>
          <th>pval_norm_fdr_bh</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Yap/Taz</th>
          <td>0.972922</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CRT</th>
          <td>0.958546</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TUBA1A</th>
          <td>0.939593</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>NUPS</th>
          <td>0.915081</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TFRC</th>
          <td>0.895695</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>HSP60</th>
          <td>0.889447</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Actin</th>
          <td>0.879185</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CTNNB1</th>
          <td>0.876350</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Climp63</th>
          <td>0.873912</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>VINC</th>
          <td>0.862451</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 94-96

The results are stored in `adata.uns['moranI']` and we can visualize selected genes
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. code-block:: default


    sc.pl.spatial(adata, color="Yap/Taz", spot_size=1)



.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
   :alt: Yap/Taz
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  37.456 seconds)

**Estimated memory usage:**  1337 MB


.. _sphx_glr_download_auto_tutorials_tutorial_fouri.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_fouri.py <tutorial_fouri.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_fouri.ipynb <tutorial_fouri.ipynb>`
