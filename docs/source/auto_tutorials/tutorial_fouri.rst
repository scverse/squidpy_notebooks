
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_fouri.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/scverse/squidpy_notebooks/main?filepath=docs/source/auto_tutorials/tutorial_fouri.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_fouri.py:

Analyze 4i data
===============

This tutorial shows how to apply Squidpy for the analysis of 4i data.

The data used here was obtained from :cite:`Gut2018-ap`.
We provide a pre-processed subset of the data, in :class:`anndata.AnnData` format.
For details on how it was pre-processed, please refer to the original paper.

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_imc.py` for additional analysis examples.

Import packages & data
----------------------
To run the notebook locally, create a conda environment as *conda env create -f environment.yml* using this
`environment.yml <https://github.com/scverse/squidpy_notebooks/blob/main/environment.yml>`_.

.. GENERATED FROM PYTHON SOURCE LINES 21-29

.. code-block:: default


    import squidpy as sq

    print(f"squidpy=={sq.__version__}")

    # load the pre-processed dataset
    adata = sq.datasets.four_i()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    squidpy==1.2.2
    /Users/giovanni.palla/Projects/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1830: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
      utils.warn_names_duplicates("var")




.. GENERATED FROM PYTHON SOURCE LINES 30-32

First, let's visualize cluster annotation in spatial context
with :func:`squidpy.pl.spatial_scatter`.

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default

    sq.pl.spatial_scatter(adata, shape=None, color="cluster", size=1)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
   :alt: cluster
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 36-56

Neighborhood enrichment analysis
--------------------------------
Similar to other spatial data, we can investigate spatial organization of clusters
in a quantitative way, by computing a neighborhood enrichment score.
You can compute such score with the following function: :func:`squidpy.gr.nhood_enrichment`.
In short, it's an enrichment score on spatial proximity of clusters:
if spots belonging to two different clusters are often close to each other,
then they will have a high score and can be defined as being *enriched*.
On the other hand, if they are far apart, the score will be low
and they can be defined as *depleted*.
This score is based on a permutation-based test, and you can set
the number of permutations with the `n_perms` argument (default is 1000).

Since the function works on a connectivity matrix, we need to compute that as well.
This can be done with :func:`squidpy.gr.spatial_neighbors`.
Please see :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for more details
of how this function works.

Finally, we'll directly visualize the results with :func:`squidpy.pl.nhood_enrichment`.
We'll add a dendrogram to the heatmap computed with linkage method *ward*.

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default

    sq.gr.spatial_neighbors(adata, coord_type="generic")
    sq.gr.nhood_enrichment(adata, cluster_key="cluster")
    sq.pl.nhood_enrichment(adata, cluster_key="cluster", method="ward", vmin=-100, vmax=100)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
   :alt: Neighborhood enrichment
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1000 [00:00<?, ?/s]      0%|          | 1/1000 [00:05<1:31:02,  5.47s/]      1%|          | 8/1000 [00:05<08:27,  1.95/s]        1%|1         | 14/1000 [00:05<04:08,  3.97/s]      2%|2         | 20/1000 [00:05<02:28,  6.59/s]      3%|2         | 27/1000 [00:05<01:32, 10.51/s]      3%|3         | 33/1000 [00:06<01:07, 14.43/s]      4%|4         | 40/1000 [00:06<00:47, 20.08/s]      5%|4         | 46/1000 [00:06<00:38, 25.10/s]      5%|5         | 52/1000 [00:06<00:31, 30.39/s]      6%|5         | 59/1000 [00:06<00:25, 36.48/s]      6%|6         | 65/1000 [00:06<00:22, 40.85/s]      7%|7         | 71/1000 [00:06<00:21, 43.50/s]      8%|7         | 78/1000 [00:06<00:19, 48.44/s]      8%|8         | 84/1000 [00:06<00:18, 50.66/s]      9%|9         | 90/1000 [00:07<00:17, 51.47/s]     10%|9         | 96/1000 [00:07<00:16, 53.52/s]     10%|#         | 102/1000 [00:07<00:16, 54.47/s]     11%|#         | 108/1000 [00:07<00:15, 55.81/s]     12%|#1        | 115/1000 [00:07<00:15, 55.83/s]     12%|#2        | 121/1000 [00:07<00:17, 51.50/s]     13%|#2        | 127/1000 [00:07<00:16, 53.53/s]     13%|#3        | 133/1000 [00:07<00:16, 53.45/s]     14%|#3        | 139/1000 [00:07<00:16, 51.88/s]     15%|#4        | 146/1000 [00:08<00:15, 54.63/s]     15%|#5        | 152/1000 [00:08<00:15, 54.21/s]     16%|#5        | 158/1000 [00:08<00:15, 53.48/s]     16%|#6        | 164/1000 [00:08<00:15, 54.37/s]     17%|#7        | 171/1000 [00:08<00:14, 56.33/s]     18%|#7        | 177/1000 [00:08<00:14, 57.19/s]     18%|#8        | 183/1000 [00:08<00:14, 56.19/s]     19%|#9        | 190/1000 [00:08<00:14, 56.57/s]     20%|#9        | 196/1000 [00:08<00:14, 56.63/s]     20%|##        | 202/1000 [00:09<00:13, 57.39/s]     21%|##        | 209/1000 [00:09<00:13, 59.97/s]     22%|##1       | 216/1000 [00:09<00:13, 59.95/s]     22%|##2       | 223/1000 [00:09<00:12, 60.05/s]     23%|##3       | 230/1000 [00:09<00:12, 59.80/s]     24%|##3       | 237/1000 [00:09<00:12, 59.94/s]     24%|##4       | 243/1000 [00:09<00:12, 59.30/s]     25%|##4       | 249/1000 [00:09<00:12, 59.02/s]     26%|##5       | 255/1000 [00:09<00:12, 59.05/s]     26%|##6       | 261/1000 [00:10<00:12, 57.64/s]     27%|##6       | 268/1000 [00:10<00:12, 58.42/s]     27%|##7       | 274/1000 [00:10<00:12, 58.21/s]     28%|##8       | 281/1000 [00:10<00:12, 58.79/s]     29%|##8       | 288/1000 [00:10<00:12, 59.10/s]     30%|##9       | 295/1000 [00:10<00:11, 61.09/s]     30%|###       | 302/1000 [00:10<00:11, 60.07/s]     31%|###       | 309/1000 [00:10<00:12, 57.32/s]     32%|###1      | 315/1000 [00:10<00:11, 57.44/s]     32%|###2      | 321/1000 [00:11<00:11, 57.79/s]     33%|###2      | 327/1000 [00:11<00:11, 57.72/s]     33%|###3      | 334/1000 [00:11<00:11, 59.73/s]     34%|###4      | 340/1000 [00:11<00:11, 59.66/s]     35%|###4      | 346/1000 [00:11<00:11, 59.20/s]     35%|###5      | 352/1000 [00:11<00:11, 54.79/s]     36%|###5      | 358/1000 [00:11<00:12, 51.94/s]     36%|###6      | 364/1000 [00:11<00:12, 51.31/s]     37%|###7      | 370/1000 [00:11<00:12, 50.17/s]     38%|###7      | 376/1000 [00:12<00:13, 47.64/s]     38%|###8      | 381/1000 [00:12<00:12, 47.81/s]     39%|###8      | 386/1000 [00:12<00:13, 44.98/s]     39%|###9      | 392/1000 [00:12<00:12, 47.10/s]     40%|###9      | 397/1000 [00:12<00:13, 44.95/s]     40%|####      | 402/1000 [00:12<00:13, 42.84/s]     41%|####      | 407/1000 [00:12<00:16, 36.06/s]     41%|####1     | 412/1000 [00:13<00:15, 37.95/s]     42%|####1     | 416/1000 [00:13<00:16, 35.47/s]     42%|####2     | 422/1000 [00:13<00:14, 39.36/s]     43%|####2     | 427/1000 [00:13<00:14, 38.57/s]     43%|####3     | 432/1000 [00:13<00:13, 40.78/s]     44%|####3     | 437/1000 [00:13<00:13, 41.71/s]     44%|####4     | 442/1000 [00:13<00:13, 42.80/s]     45%|####4     | 448/1000 [00:13<00:12, 45.63/s]     45%|####5     | 453/1000 [00:13<00:12, 45.23/s]     46%|####6     | 460/1000 [00:14<00:10, 50.63/s]     47%|####6     | 466/1000 [00:14<00:10, 52.24/s]     47%|####7     | 473/1000 [00:14<00:09, 54.70/s]     48%|####8     | 480/1000 [00:14<00:09, 54.92/s]     49%|####8     | 487/1000 [00:14<00:08, 58.02/s]     49%|####9     | 493/1000 [00:14<00:08, 58.51/s]     50%|####9     | 499/1000 [00:14<00:08, 58.73/s]     50%|#####     | 505/1000 [00:14<00:08, 59.07/s]     51%|#####1    | 511/1000 [00:14<00:08, 57.48/s]     52%|#####1    | 518/1000 [00:15<00:08, 59.80/s]     52%|#####2    | 525/1000 [00:15<00:07, 59.83/s]     53%|#####3    | 531/1000 [00:15<00:07, 59.59/s]     54%|#####3    | 537/1000 [00:15<00:07, 58.14/s]     54%|#####4    | 544/1000 [00:15<00:07, 60.57/s]     55%|#####5    | 551/1000 [00:15<00:07, 60.01/s]     56%|#####5    | 558/1000 [00:15<00:07, 59.99/s]     56%|#####6    | 565/1000 [00:15<00:07, 60.24/s]     57%|#####7    | 572/1000 [00:15<00:07, 59.01/s]     58%|#####7    | 579/1000 [00:16<00:07, 59.20/s]     59%|#####8    | 586/1000 [00:16<00:06, 60.82/s]     59%|#####9    | 593/1000 [00:16<00:06, 60.60/s]     60%|######    | 600/1000 [00:16<00:06, 60.47/s]     61%|######    | 607/1000 [00:16<00:06, 59.05/s]     61%|######1   | 613/1000 [00:16<00:06, 59.24/s]     62%|######2   | 620/1000 [00:16<00:06, 60.85/s]     63%|######2   | 627/1000 [00:16<00:06, 60.74/s]     63%|######3   | 634/1000 [00:16<00:06, 60.45/s]     64%|######4   | 641/1000 [00:17<00:05, 60.41/s]     65%|######4   | 648/1000 [00:17<00:05, 60.33/s]     66%|######5   | 655/1000 [00:17<00:05, 59.96/s]     66%|######6   | 661/1000 [00:17<00:05, 58.63/s]     67%|######6   | 668/1000 [00:17<00:05, 60.03/s]     68%|######7   | 675/1000 [00:17<00:05, 57.87/s]     68%|######8   | 682/1000 [00:17<00:05, 59.88/s]     69%|######8   | 689/1000 [00:17<00:05, 59.66/s]     70%|######9   | 695/1000 [00:18<00:05, 59.18/s]     70%|#######   | 701/1000 [00:18<00:05, 59.05/s]     71%|#######   | 708/1000 [00:18<00:04, 59.34/s]     71%|#######1  | 714/1000 [00:18<00:04, 59.36/s]     72%|#######2  | 720/1000 [00:18<00:05, 53.13/s]     73%|#######2  | 726/1000 [00:18<00:06, 41.55/s]     73%|#######3  | 731/1000 [00:18<00:06, 38.77/s]     74%|#######3  | 737/1000 [00:18<00:06, 43.39/s]     74%|#######4  | 743/1000 [00:19<00:05, 45.59/s]     75%|#######4  | 748/1000 [00:19<00:05, 45.39/s]     75%|#######5  | 753/1000 [00:19<00:05, 45.64/s]     76%|#######5  | 758/1000 [00:19<00:05, 43.83/s]     76%|#######6  | 763/1000 [00:19<00:05, 41.83/s]     77%|#######6  | 768/1000 [00:19<00:05, 42.12/s]     77%|#######7  | 773/1000 [00:19<00:05, 42.45/s]     78%|#######7  | 778/1000 [00:19<00:05, 41.27/s]     78%|#######8  | 784/1000 [00:20<00:04, 43.92/s]     79%|#######9  | 790/1000 [00:20<00:04, 47.88/s]     80%|#######9  | 797/1000 [00:20<00:03, 51.48/s]     80%|########  | 803/1000 [00:20<00:03, 50.69/s]     81%|########  | 809/1000 [00:20<00:03, 53.03/s]     82%|########1 | 815/1000 [00:20<00:03, 47.21/s]     82%|########2 | 820/1000 [00:20<00:04, 43.61/s]     83%|########2 | 826/1000 [00:20<00:03, 45.41/s]     83%|########3 | 833/1000 [00:21<00:03, 48.40/s]     84%|########3 | 839/1000 [00:21<00:03, 49.15/s]     84%|########4 | 845/1000 [00:21<00:03, 50.52/s]     85%|########5 | 851/1000 [00:21<00:02, 50.31/s]     86%|########5 | 857/1000 [00:21<00:02, 51.05/s]     86%|########6 | 864/1000 [00:21<00:02, 53.54/s]     87%|########7 | 870/1000 [00:21<00:02, 50.35/s]     88%|########7 | 876/1000 [00:21<00:02, 52.33/s]     88%|########8 | 882/1000 [00:21<00:02, 54.16/s]     89%|########8 | 888/1000 [00:22<00:02, 54.35/s]     90%|########9 | 895/1000 [00:22<00:01, 56.09/s]     90%|######### | 902/1000 [00:22<00:01, 56.69/s]     91%|######### | 908/1000 [00:22<00:01, 57.54/s]     91%|#########1| 914/1000 [00:22<00:01, 58.17/s]     92%|#########2| 920/1000 [00:22<00:01, 58.57/s]     93%|#########2| 926/1000 [00:22<00:01, 55.82/s]     93%|#########3| 933/1000 [00:22<00:01, 58.32/s]     94%|#########3| 940/1000 [00:22<00:01, 59.05/s]     95%|#########4| 947/1000 [00:23<00:00, 59.70/s]     95%|#########5| 953/1000 [00:23<00:00, 59.38/s]     96%|#########5| 959/1000 [00:23<00:00, 58.39/s]     96%|#########6| 965/1000 [00:23<00:00, 54.84/s]     97%|#########7| 971/1000 [00:23<00:00, 55.71/s]     98%|#########7| 977/1000 [00:23<00:00, 56.43/s]     98%|#########8| 983/1000 [00:23<00:00, 56.53/s]     99%|#########8| 989/1000 [00:23<00:00, 56.22/s]    100%|#########9| 995/1000 [00:23<00:00, 52.72/s]    100%|##########| 1000/1000 [00:23<00:00, 41.68/s]




.. GENERATED FROM PYTHON SOURCE LINES 62-66

A similar analysis can be performed with :func:`squidpy.gr.interaction_matrix`.
The function computes the number of shared edges in the neighbor graph between clusters.
Please see :ref:`sphx_glr_auto_examples_graph_compute_interaction_matrix.py` for more details
of how this function works.

.. GENERATED FROM PYTHON SOURCE LINES 66-70

.. code-block:: default

    sq.gr.interaction_matrix(adata, cluster_key="cluster")
    sq.pl.interaction_matrix(adata, cluster_key="cluster", method="ward", vmax=20000)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
   :alt: Interaction matrix
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 71-86

Additional analyses to gain quantitative understanding of spatial patterning of
sub-cellular observations are:
- :ref:`sphx_glr_auto_examples_graph_compute_ripley.py` for Ripley's statistics.
- :ref:`sphx_glr_auto_examples_graph_compute_co_occurrence.py` for co-occurrence score.

Spatially variable genes with spatial autocorrelation statistics
----------------------------------------------------------------
With Squidpy we can investigate spatial variability of gene expression.
This is an example of a function that only supports 2D data.
:func:`squidpy.gr.spatial_autocorr` conveniently wraps two
spatial autocorrelation statistics: *Moran's I* and *Geary's C*.
They provide a score on the degree of spatial variability of gene expression.
The statistic as well as the p-value are computed for each gene, and FDR correction
is performed. For the purpose of this tutorial, let's compute the *Moran's I* score.
See :ref:`sphx_glr_auto_examples_graph_compute_moran.py` for more details.

.. GENERATED FROM PYTHON SOURCE LINES 86-91

.. code-block:: default


    adata.var_names_make_unique()
    sq.gr.spatial_autocorr(adata, mode="moran")
    adata.uns["moranI"].head(10)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>I</th>
          <th>pval_norm</th>
          <th>var_norm</th>
          <th>pval_norm_fdr_bh</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Yap/Taz</th>
          <td>0.972922</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CRT</th>
          <td>0.958546</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TUBA1A</th>
          <td>0.939593</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>NUPS</th>
          <td>0.915081</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TFRC</th>
          <td>0.895695</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>HSP60</th>
          <td>0.889447</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Actin</th>
          <td>0.879185</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CTNNB1</th>
          <td>0.876350</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Climp63</th>
          <td>0.873912</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>VINC</th>
          <td>0.862451</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 92-94

The results are stored in `adata.uns['moranI']` and we can visualize selected genes
with :func:`squidpy.pl.spatial_scatter`.

.. GENERATED FROM PYTHON SOURCE LINES 94-96

.. code-block:: default


    sq.pl.spatial_scatter(adata, shape=None, color="Yap/Taz", size=1)



.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
   :alt: Yap/Taz
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  12.110 seconds)

**Estimated memory usage:**  448 MB


.. _sphx_glr_download_auto_tutorials_tutorial_fouri.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_fouri.py <tutorial_fouri.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_fouri.ipynb <tutorial_fouri.ipynb>`
