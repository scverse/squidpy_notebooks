
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_fouri.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_tutorials/tutorial_fouri.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_fouri.py:

Analyze 4i data
===============

This tutorial shows how to apply Squidpy for the analysis of 4i data.

The data used here was obtained from :cite:`Gut2018-ap`.
We provide a pre-processed subset of the data, in :class:`anndata.AnnData` format.
For details on how it was pre-processed, please refer to the original paper.

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_imc.py` for additional analysis examples.

Import packages & data
----------------------
To run the notebook locally, create a conda environment as *conda env create -f environment.yml* using this
`environment.yml <https://github.com/theislab/squidpy_notebooks/blob/master/environment.yml>`_.

.. GENERATED FROM PYTHON SOURCE LINES 21-31

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    sc.logging.print_header()
    print(f"squidpy=={sq.__version__}")

    # load the pre-processed dataset
    adata = sq.datasets.four_i()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scanpy==1.8.0 anndata==0.7.6 umap==0.5.1 numpy==1.21.0 scipy==1.7.0 pandas==1.2.5 scikit-learn==0.24.2 statsmodels==0.12.2 python-igraph==0.9.6 pynndescent==0.5.2
    squidpy==1.0.1
      0%|          | 0.00/173M [00:00<?, ?B/s]      0%|          | 56.0k/173M [00:00<07:19, 413kB/s]      0%|          | 208k/173M [00:00<03:40, 823kB/s]       0%|          | 872k/173M [00:00<01:08, 2.66MB/s]      2%|1         | 3.43M/173M [00:00<00:19, 9.20MB/s]      5%|5         | 9.13M/173M [00:00<00:08, 21.2MB/s]      9%|8         | 14.9M/173M [00:00<00:05, 28.7MB/s]     12%|#2        | 20.8M/173M [00:00<00:04, 33.3MB/s]     15%|#5        | 26.7M/173M [00:01<00:04, 36.7MB/s]     19%|#8        | 32.5M/173M [00:01<00:03, 38.7MB/s]     22%|##2       | 38.3M/173M [00:01<00:03, 40.2MB/s]     25%|##5       | 44.0M/173M [00:01<00:03, 40.7MB/s]     29%|##8       | 49.8M/173M [00:01<00:03, 41.6MB/s]     32%|###2      | 55.7M/173M [00:01<00:02, 42.3MB/s]     35%|###5      | 61.4M/173M [00:01<00:02, 42.2MB/s]     39%|###8      | 67.2M/173M [00:02<00:02, 40.2MB/s]     42%|####1     | 72.2M/173M [00:02<00:02, 41.5MB/s]     44%|####4     | 76.3M/173M [00:02<00:02, 41.9MB/s]     47%|####6     | 80.8M/173M [00:02<00:02, 42.0MB/s]     49%|####9     | 85.0M/173M [00:02<00:02, 42.6MB/s]     52%|#####1    | 89.5M/173M [00:02<00:02, 42.6MB/s]     54%|#####4    | 93.8M/173M [00:02<00:01, 43.2MB/s]     57%|#####6    | 98.4M/173M [00:02<00:01, 43.3MB/s]     59%|#####9    | 103M/173M [00:02<00:01, 43.6MB/s]      62%|######1   | 107M/173M [00:03<00:01, 43.6MB/s]     64%|######4   | 112M/173M [00:03<00:01, 44.1MB/s]     67%|######7   | 116M/173M [00:03<00:01, 43.8MB/s]     70%|######9   | 120M/173M [00:03<00:01, 43.4MB/s]     72%|#######2  | 125M/173M [00:03<00:01, 43.9MB/s]     75%|#######4  | 129M/173M [00:03<00:01, 43.5MB/s]     77%|#######7  | 134M/173M [00:03<00:00, 44.3MB/s]     80%|#######9  | 138M/173M [00:03<00:00, 43.6MB/s]     83%|########2 | 143M/173M [00:03<00:00, 44.5MB/s]     85%|########4 | 147M/173M [00:04<00:00, 43.7MB/s]     88%|########7 | 152M/173M [00:04<00:00, 44.5MB/s]     90%|######### | 156M/173M [00:04<00:00, 43.8MB/s]     93%|#########2| 160M/173M [00:04<00:00, 43.7MB/s]     95%|#########5| 165M/173M [00:04<00:00, 44.0MB/s]     98%|#########7| 169M/173M [00:04<00:00, 43.8MB/s]    100%|##########| 173M/173M [00:04<00:00, 38.9MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 32-34

First, let's visualize cluster annotation in spatial context
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default

    sc.pl.spatial(adata, color="cluster", spot_size=1)





.. image:: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
    :alt: cluster
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 38-58

Neighborhood enrichment analysis
--------------------------------
Similar to other spatial data, we can investigate spatial organization of clusters
in a quantitative way, by computing a neighborhood enrichment score.
You can compute such score with the following function: :func:`squidpy.gr.nhood_enrichment`.
In short, it's an enrichment score on spatial proximity of clusters:
if spots belonging to two different clusters are often close to each other,
then they will have a high score and can be defined as being *enriched*.
On the other hand, if they are far apart, the score will be low
and they can be defined as *depleted*.
This score is based on a permutation-based test, and you can set
the number of permutations with the `n_perms` argument (default is 1000).

Since the function works on a connectivity matrix, we need to compute that as well.
This can be done with :func:`squidpy.gr.spatial_neighbors`.
Please see :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for more details
of how this function works.

Finally, we'll directly visualize the results with :func:`squidpy.pl.nhood_enrichment`.
We'll add a dendrogram to the heatmap computed with linkage method *ward*.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default

    sq.gr.spatial_neighbors(adata, coord_type="generic")
    sq.gr.nhood_enrichment(adata, cluster_key="cluster")
    sq.pl.nhood_enrichment(adata, cluster_key="cluster", method="ward", vmin=-100, vmax=100)





.. image:: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
    :alt: Neighborhood enrichment
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/scipy/sparse/_index.py:125: SparseEfficiencyWarning: Changing the sparsity structure of a csr_matrix is expensive. lil_matrix is more efficient.
      self._set_arrayXarray(i, j, x)
      0%|          | 0/1000 [00:00<?, ?/s]      0%|          | 1/1000 [00:00<02:09,  7.70/s]      1%|          | 6/1000 [00:00<00:36, 26.87/s]      1%|1         | 11/1000 [00:00<00:28, 34.20/s]      2%|1         | 16/1000 [00:00<00:26, 36.70/s]      2%|2         | 21/1000 [00:00<00:24, 39.99/s]      3%|2         | 26/1000 [00:00<00:25, 38.77/s]      3%|3         | 30/1000 [00:00<00:24, 38.98/s]      4%|3         | 35/1000 [00:00<00:24, 40.00/s]      4%|4         | 40/1000 [00:01<00:22, 41.98/s]      4%|4         | 45/1000 [00:01<00:24, 39.47/s]      5%|5         | 50/1000 [00:01<00:24, 39.56/s]      6%|5         | 55/1000 [00:01<00:22, 42.16/s]      6%|6         | 60/1000 [00:01<00:25, 37.24/s]      6%|6         | 65/1000 [00:01<00:24, 38.13/s]      7%|7         | 70/1000 [00:01<00:23, 38.84/s]      8%|7         | 75/1000 [00:01<00:23, 38.98/s]      8%|8         | 80/1000 [00:02<00:23, 39.32/s]      8%|8         | 85/1000 [00:02<00:22, 40.28/s]      9%|9         | 90/1000 [00:02<00:22, 40.85/s]     10%|9         | 95/1000 [00:02<00:22, 40.81/s]     10%|#         | 100/1000 [00:02<00:21, 42.67/s]     10%|#         | 105/1000 [00:02<00:21, 41.21/s]     11%|#1        | 110/1000 [00:02<00:21, 41.42/s]     12%|#1        | 115/1000 [00:02<00:21, 41.22/s]     12%|#2        | 120/1000 [00:03<00:20, 42.41/s]     12%|#2        | 125/1000 [00:03<00:22, 39.77/s]     13%|#3        | 130/1000 [00:03<00:21, 40.67/s]     14%|#3        | 135/1000 [00:03<00:21, 40.43/s]     14%|#4        | 140/1000 [00:03<00:21, 40.87/s]     14%|#4        | 145/1000 [00:03<00:21, 40.69/s]     15%|#5        | 150/1000 [00:03<00:20, 42.09/s]     16%|#5        | 155/1000 [00:03<00:21, 39.65/s]     16%|#6        | 160/1000 [00:04<00:21, 39.93/s]     16%|#6        | 165/1000 [00:04<00:21, 39.26/s]     17%|#7        | 170/1000 [00:04<00:21, 39.45/s]     17%|#7        | 174/1000 [00:04<00:20, 39.36/s]     18%|#7        | 178/1000 [00:04<00:21, 38.89/s]     18%|#8        | 182/1000 [00:04<00:21, 38.66/s]     19%|#8        | 187/1000 [00:04<00:20, 39.57/s]     19%|#9        | 192/1000 [00:04<00:19, 40.62/s]     20%|#9        | 197/1000 [00:04<00:19, 40.64/s]     20%|##        | 202/1000 [00:05<00:19, 41.29/s]     21%|##        | 207/1000 [00:05<00:19, 41.21/s]     21%|##1       | 212/1000 [00:05<00:19, 40.81/s]     22%|##1       | 217/1000 [00:05<00:18, 41.65/s]     22%|##2       | 222/1000 [00:05<00:18, 41.96/s]     23%|##2       | 227/1000 [00:05<00:18, 42.27/s]     23%|##3       | 232/1000 [00:05<00:19, 39.97/s]     24%|##3       | 237/1000 [00:05<00:19, 40.05/s]     24%|##4       | 243/1000 [00:06<00:17, 42.67/s]     25%|##4       | 248/1000 [00:06<00:18, 40.12/s]     25%|##5       | 253/1000 [00:06<00:18, 40.19/s]     26%|##5       | 258/1000 [00:06<00:17, 41.43/s]     26%|##6       | 263/1000 [00:06<00:18, 39.96/s]     27%|##6       | 269/1000 [00:06<00:17, 42.92/s]     27%|##7       | 274/1000 [00:06<00:17, 42.49/s]     28%|##7       | 279/1000 [00:06<00:17, 41.92/s]     28%|##8       | 284/1000 [00:07<00:18, 39.40/s]     29%|##8       | 289/1000 [00:07<00:17, 41.60/s]     29%|##9       | 294/1000 [00:07<00:17, 39.38/s]     30%|###       | 300/1000 [00:07<00:16, 42.24/s]     30%|###       | 305/1000 [00:07<00:17, 39.01/s]     31%|###       | 309/1000 [00:07<00:17, 38.72/s]     31%|###1      | 313/1000 [00:07<00:17, 38.90/s]     32%|###1      | 317/1000 [00:07<00:17, 38.64/s]     32%|###2      | 321/1000 [00:08<00:17, 38.91/s]     33%|###2      | 326/1000 [00:08<00:17, 39.64/s]     33%|###3      | 330/1000 [00:08<00:16, 39.51/s]     33%|###3      | 334/1000 [00:08<00:16, 39.53/s]     34%|###3      | 338/1000 [00:08<00:16, 39.34/s]     34%|###4      | 342/1000 [00:08<00:16, 39.33/s]     35%|###4      | 347/1000 [00:08<00:16, 40.18/s]     35%|###5      | 352/1000 [00:08<00:15, 40.79/s]     36%|###5      | 357/1000 [00:08<00:15, 40.86/s]     36%|###6      | 362/1000 [00:09<00:15, 40.24/s]     37%|###6      | 367/1000 [00:09<00:15, 40.62/s]     37%|###7      | 372/1000 [00:09<00:14, 43.00/s]     38%|###7      | 377/1000 [00:09<00:14, 42.04/s]     38%|###8      | 382/1000 [00:09<00:15, 39.86/s]     39%|###8      | 387/1000 [00:09<00:15, 40.14/s]     39%|###9      | 392/1000 [00:09<00:15, 40.38/s]     40%|###9      | 397/1000 [00:09<00:14, 42.58/s]     40%|####      | 402/1000 [00:10<00:15, 39.46/s]     41%|####      | 407/1000 [00:10<00:14, 39.98/s]     41%|####1     | 412/1000 [00:10<00:14, 39.82/s]     42%|####1     | 417/1000 [00:10<00:15, 38.59/s]     42%|####2     | 423/1000 [00:10<00:14, 39.14/s]     43%|####2     | 429/1000 [00:10<00:13, 42.13/s]     43%|####3     | 434/1000 [00:10<00:14, 39.69/s]     44%|####3     | 439/1000 [00:10<00:13, 40.56/s]     44%|####4     | 444/1000 [00:11<00:14, 38.45/s]     45%|####4     | 449/1000 [00:11<00:14, 39.09/s]     45%|####5     | 454/1000 [00:11<00:13, 41.07/s]     46%|####5     | 459/1000 [00:11<00:13, 39.32/s]     46%|####6     | 464/1000 [00:11<00:12, 41.44/s]     47%|####6     | 469/1000 [00:11<00:13, 39.68/s]     47%|####7     | 474/1000 [00:11<00:13, 40.30/s]     48%|####7     | 479/1000 [00:11<00:12, 40.89/s]     48%|####8     | 484/1000 [00:12<00:12, 41.33/s]     49%|####8     | 489/1000 [00:12<00:12, 41.64/s]     49%|####9     | 494/1000 [00:12<00:12, 42.10/s]     50%|####9     | 499/1000 [00:12<00:11, 44.11/s]     50%|#####     | 504/1000 [00:12<00:11, 42.27/s]     51%|#####     | 509/1000 [00:12<00:11, 41.39/s]     51%|#####1    | 514/1000 [00:12<00:12, 39.80/s]     52%|#####1    | 519/1000 [00:12<00:11, 40.50/s]     52%|#####2    | 524/1000 [00:13<00:12, 39.12/s]     53%|#####2    | 529/1000 [00:13<00:11, 41.14/s]     53%|#####3    | 534/1000 [00:13<00:11, 39.27/s]     54%|#####4    | 540/1000 [00:13<00:11, 39.67/s]     55%|#####4    | 545/1000 [00:13<00:11, 40.31/s]     55%|#####5    | 550/1000 [00:13<00:10, 42.11/s]     56%|#####5    | 555/1000 [00:13<00:10, 41.77/s]     56%|#####6    | 560/1000 [00:13<00:11, 38.92/s]     56%|#####6    | 564/1000 [00:14<00:11, 39.16/s]     57%|#####6    | 569/1000 [00:14<00:10, 39.82/s]     57%|#####7    | 575/1000 [00:14<00:09, 42.57/s]     58%|#####8    | 580/1000 [00:14<00:10, 39.39/s]     58%|#####8    | 585/1000 [00:14<00:10, 39.36/s]     59%|#####8    | 590/1000 [00:14<00:09, 41.72/s]     60%|#####9    | 595/1000 [00:14<00:09, 41.12/s]     60%|######    | 600/1000 [00:14<00:10, 39.47/s]     60%|######    | 604/1000 [00:15<00:10, 38.94/s]     61%|######    | 608/1000 [00:15<00:10, 38.85/s]     61%|######1   | 612/1000 [00:15<00:10, 38.69/s]     62%|######1   | 616/1000 [00:15<00:09, 38.43/s]     62%|######2   | 620/1000 [00:15<00:09, 38.66/s]     62%|######2   | 625/1000 [00:15<00:09, 39.38/s]     63%|######3   | 630/1000 [00:15<00:09, 40.24/s]     64%|######3   | 635/1000 [00:15<00:08, 42.23/s]     64%|######4   | 640/1000 [00:15<00:09, 37.92/s]     64%|######4   | 645/1000 [00:16<00:08, 40.28/s]     65%|######5   | 650/1000 [00:16<00:08, 39.03/s]     66%|######5   | 655/1000 [00:16<00:08, 39.88/s]     66%|######6   | 660/1000 [00:16<00:08, 41.41/s]     66%|######6   | 665/1000 [00:16<00:08, 40.24/s]     67%|######7   | 670/1000 [00:16<00:07, 42.44/s]     68%|######7   | 675/1000 [00:16<00:08, 39.99/s]     68%|######8   | 680/1000 [00:16<00:07, 40.67/s]     68%|######8   | 685/1000 [00:17<00:07, 42.94/s]     69%|######9   | 690/1000 [00:17<00:07, 40.76/s]     70%|######9   | 695/1000 [00:17<00:07, 40.36/s]     70%|#######   | 700/1000 [00:17<00:07, 38.63/s]     71%|#######   | 706/1000 [00:17<00:07, 39.30/s]     71%|#######1  | 712/1000 [00:17<00:07, 40.50/s]     72%|#######1  | 717/1000 [00:17<00:06, 41.30/s]     72%|#######2  | 722/1000 [00:17<00:06, 42.57/s]     73%|#######2  | 727/1000 [00:18<00:06, 41.44/s]     73%|#######3  | 732/1000 [00:18<00:06, 38.98/s]     74%|#######3  | 736/1000 [00:18<00:06, 38.33/s]     74%|#######4  | 741/1000 [00:18<00:06, 39.71/s]     75%|#######4  | 746/1000 [00:18<00:06, 40.32/s]     75%|#######5  | 751/1000 [00:18<00:05, 42.50/s]     76%|#######5  | 756/1000 [00:18<00:05, 41.17/s]     76%|#######6  | 761/1000 [00:18<00:05, 40.91/s]     77%|#######6  | 766/1000 [00:19<00:05, 42.17/s]     77%|#######7  | 771/1000 [00:19<00:05, 40.54/s]     78%|#######7  | 776/1000 [00:19<00:05, 41.44/s]     78%|#######8  | 781/1000 [00:19<00:05, 41.63/s]     79%|#######8  | 786/1000 [00:19<00:04, 43.62/s]     79%|#######9  | 791/1000 [00:19<00:05, 41.70/s]     80%|#######9  | 796/1000 [00:19<00:04, 41.30/s]     80%|########  | 802/1000 [00:19<00:04, 43.55/s]     81%|########  | 807/1000 [00:20<00:04, 41.92/s]     81%|########1 | 812/1000 [00:20<00:04, 40.05/s]     82%|########1 | 817/1000 [00:20<00:04, 40.20/s]     82%|########2 | 822/1000 [00:20<00:04, 40.33/s]     83%|########2 | 827/1000 [00:20<00:04, 39.24/s]     83%|########3 | 832/1000 [00:20<00:04, 41.74/s]     84%|########3 | 837/1000 [00:20<00:03, 41.74/s]     84%|########4 | 842/1000 [00:20<00:03, 41.43/s]     85%|########4 | 847/1000 [00:21<00:03, 39.86/s]     85%|########5 | 852/1000 [00:21<00:03, 40.48/s]     86%|########5 | 857/1000 [00:21<00:03, 39.68/s]     86%|########6 | 861/1000 [00:21<00:03, 39.70/s]     86%|########6 | 865/1000 [00:21<00:03, 39.56/s]     87%|########7 | 870/1000 [00:21<00:03, 40.54/s]     88%|########7 | 875/1000 [00:21<00:03, 40.40/s]     88%|########8 | 880/1000 [00:21<00:02, 42.66/s]     88%|########8 | 885/1000 [00:21<00:02, 40.13/s]     89%|########9 | 890/1000 [00:22<00:02, 41.92/s]     90%|########9 | 895/1000 [00:22<00:02, 40.53/s]     90%|######### | 900/1000 [00:22<00:02, 42.45/s]     90%|######### | 905/1000 [00:22<00:02, 40.73/s]     91%|#########1| 910/1000 [00:22<00:02, 40.70/s]     92%|#########1| 915/1000 [00:22<00:02, 41.55/s]     92%|#########2| 920/1000 [00:22<00:02, 39.61/s]     92%|#########2| 925/1000 [00:22<00:01, 37.60/s]     93%|#########3| 931/1000 [00:23<00:01, 41.33/s]     94%|#########3| 936/1000 [00:23<00:01, 39.81/s]     94%|#########4| 941/1000 [00:23<00:01, 38.49/s]     95%|#########4| 946/1000 [00:23<00:01, 39.11/s]     95%|#########5| 950/1000 [00:23<00:01, 38.78/s]     96%|#########5| 955/1000 [00:23<00:01, 39.52/s]     96%|#########6| 960/1000 [00:23<00:00, 40.54/s]     96%|#########6| 965/1000 [00:23<00:00, 40.33/s]     97%|#########7| 970/1000 [00:24<00:00, 40.85/s]     98%|#########7| 975/1000 [00:24<00:00, 40.84/s]     98%|#########8| 980/1000 [00:24<00:00, 42.56/s]     98%|#########8| 985/1000 [00:24<00:00, 39.80/s]     99%|#########9| 991/1000 [00:24<00:00, 42.17/s]    100%|#########9| 996/1000 [00:24<00:00, 42.05/s]    100%|##########| 1000/1000 [00:24<00:00, 40.35/s]
    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/squidpy/pl/_utils.py:573: MatplotlibDeprecationWarning: In a future version, 'pad' will default to rcParams['figure.subplot.hspace'].  Set pad=0 to keep the old behavior.
      col_ax = divider.append_axes("top", size="5%")




.. GENERATED FROM PYTHON SOURCE LINES 64-68

A similar analysis can be performed with :func:`squidpy.gr.interaction_matrix`.
The function computes the number of shared edges in the neighbor graph between clusters.
Please see :ref:`sphx_glr_auto_examples_graph_compute_interaction_matrix.py` for more details
of how this function works.

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: default

    sq.gr.interaction_matrix(adata, cluster_key="cluster")
    sq.pl.interaction_matrix(adata, cluster_key="cluster", method="ward", vmax=20000)





.. image:: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
    :alt: Interaction matrix
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/squidpy_notebooks/squidpy_notebooks/.tox/docs/lib/python3.8/site-packages/squidpy/pl/_utils.py:573: MatplotlibDeprecationWarning: In a future version, 'pad' will default to rcParams['figure.subplot.hspace'].  Set pad=0 to keep the old behavior.
      col_ax = divider.append_axes("top", size="5%")




.. GENERATED FROM PYTHON SOURCE LINES 73-88

Additional analyses to gain quantitative understanding of spatial patterning of
sub-cellular observations are:
- :ref:`sphx_glr_auto_examples_graph_compute_ripley.py` for Ripley's statistics.
- :ref:`sphx_glr_auto_examples_graph_compute_co_occurrence.py` for co-occurrence score.

Spatially variable genes with spatial autocorrelation statistics
----------------------------------------------------------------
With Squidpy we can investigate spatial variability of gene expression.
This is an example of a function that only supports 2D data.
:func:`squidpy.gr.spatial_autocorr` conveniently wraps two
spatial autocorrelation statistics: *Moran's I* and *Geary's C*.
They provide a score on the degree of spatial variability of gene expression.
The statistic as well as the p-value are computed for each gene, and FDR correction
is performed. For the purpose of this tutorial, let's compute the *Moran's I* score.
See :ref:`sphx_glr_auto_examples_graph_compute_moran.py` for more details.

.. GENERATED FROM PYTHON SOURCE LINES 88-93

.. code-block:: default


    adata.var_names_make_unique()
    sq.gr.spatial_autocorr(adata, mode="moran")
    adata.uns["moranI"].head(10)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>I</th>
          <th>pval_norm</th>
          <th>var_norm</th>
          <th>pval_norm_fdr_bh</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Yap/Taz</th>
          <td>0.972983</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CRT</th>
          <td>0.958549</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TUBA1A</th>
          <td>0.939637</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>NUPS</th>
          <td>0.915156</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TFRC</th>
          <td>0.895783</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>HSP60</th>
          <td>0.889377</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Actin</th>
          <td>0.879236</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CTNNB1</th>
          <td>0.876452</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Climp63</th>
          <td>0.873857</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>VINC</th>
          <td>0.862498</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 94-96

The results are stored in `adata.uns['moranI']` and we can visualize selected genes
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. code-block:: default


    sc.pl.spatial(adata, color="Yap/Taz", spot_size=1)



.. image:: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
    :alt: Yap/Taz
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  40.992 seconds)

**Estimated memory usage:**  1225 MB


.. _sphx_glr_download_auto_tutorials_tutorial_fouri.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_fouri.py <tutorial_fouri.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_fouri.ipynb <tutorial_fouri.ipynb>`
