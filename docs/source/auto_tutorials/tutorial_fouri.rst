
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/tutorial_fouri.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/theislab/squidpy_notebooks/master?filepath=docs/source/auto_tutorials/tutorial_fouri.ipynb
      :alt: Launch binder
      :width: 150 px

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_tutorial_fouri.py:

Analyze 4i data
===============

This tutorial shows how to apply Squidpy for the analysis of 4i data.

The data used here was obtained from :cite:`Gut2018-ap`.
We provide a pre-processed subset of the data, in :class:`anndata.AnnData` format.
For details on how it was pre-processed, please refer to the original paper.

.. seealso::

    See :ref:`sphx_glr_auto_tutorials_tutorial_imc.py` for additional analysis examples.

Import packages & data
----------------------
To run the notebook locally, create a conda environment as *conda env create -f environment.yml* using this
`environment.yml <https://github.com/theislab/squidpy_notebooks/blob/master/environment.yml>`_.

.. GENERATED FROM PYTHON SOURCE LINES 21-31

.. code-block:: default


    import scanpy as sc
    import squidpy as sq

    sc.logging.print_header()
    print(f"squidpy=={sq.__version__}")

    # load the pre-processed dataset
    adata = sq.datasets.four_i()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scanpy==1.9.1 anndata==0.8.0 umap==0.5.2 numpy==1.21.5 scipy==1.8.0 pandas==1.4.2 scikit-learn==1.0.2 statsmodels==0.13.2 python-igraph==0.9.9 pynndescent==0.5.6
    squidpy==1.1.2
    /Users/giovanni.palla/Projects/squidpy_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1830: UserWarning: Variable names are not unique. To make them unique, call `.var_names_make_unique`.
      utils.warn_names_duplicates("var")




.. GENERATED FROM PYTHON SOURCE LINES 32-34

First, let's visualize cluster annotation in spatial context
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default

    sc.pl.spatial(adata, color="cluster", spot_size=1)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
   :alt: cluster
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 38-58

Neighborhood enrichment analysis
--------------------------------
Similar to other spatial data, we can investigate spatial organization of clusters
in a quantitative way, by computing a neighborhood enrichment score.
You can compute such score with the following function: :func:`squidpy.gr.nhood_enrichment`.
In short, it's an enrichment score on spatial proximity of clusters:
if spots belonging to two different clusters are often close to each other,
then they will have a high score and can be defined as being *enriched*.
On the other hand, if they are far apart, the score will be low
and they can be defined as *depleted*.
This score is based on a permutation-based test, and you can set
the number of permutations with the `n_perms` argument (default is 1000).

Since the function works on a connectivity matrix, we need to compute that as well.
This can be done with :func:`squidpy.gr.spatial_neighbors`.
Please see :ref:`sphx_glr_auto_examples_graph_compute_spatial_neighbors.py` for more details
of how this function works.

Finally, we'll directly visualize the results with :func:`squidpy.pl.nhood_enrichment`.
We'll add a dendrogram to the heatmap computed with linkage method *ward*.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default

    sq.gr.spatial_neighbors(adata, coord_type="generic")
    sq.gr.nhood_enrichment(adata, cluster_key="cluster")
    sq.pl.nhood_enrichment(adata, cluster_key="cluster", method="ward", vmin=-100, vmax=100)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
   :alt: Neighborhood enrichment
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/1000 [00:00<?, ?/s]      0%|          | 1/1000 [00:06<1:44:07,  6.25s/]      1%|          | 7/1000 [00:06<11:05,  1.49/s]        1%|1         | 12/1000 [00:06<05:30,  2.99/s]      2%|1         | 19/1000 [00:06<02:49,  5.77/s]      2%|2         | 25/1000 [00:06<01:50,  8.79/s]      3%|3         | 31/1000 [00:06<01:17, 12.42/s]      4%|3         | 37/1000 [00:06<00:56, 16.93/s]      4%|4         | 43/1000 [00:07<00:43, 21.84/s]      5%|4         | 49/1000 [00:07<00:35, 27.07/s]      6%|5         | 55/1000 [00:07<00:29, 32.28/s]      6%|6         | 61/1000 [00:07<00:25, 36.85/s]      7%|6         | 67/1000 [00:07<00:22, 41.00/s]      7%|7         | 73/1000 [00:07<00:20, 44.76/s]      8%|7         | 79/1000 [00:07<00:19, 47.51/s]      8%|8         | 85/1000 [00:07<00:18, 49.59/s]      9%|9         | 91/1000 [00:07<00:18, 49.59/s]     10%|9         | 97/1000 [00:08<00:17, 51.57/s]     10%|#         | 104/1000 [00:08<00:16, 54.50/s]     11%|#1        | 110/1000 [00:08<00:16, 54.74/s]     12%|#1        | 116/1000 [00:08<00:15, 55.52/s]     12%|#2        | 122/1000 [00:08<00:15, 55.71/s]     13%|#2        | 128/1000 [00:08<00:15, 55.85/s]     13%|#3        | 134/1000 [00:08<00:15, 56.13/s]     14%|#4        | 140/1000 [00:08<00:15, 56.36/s]     15%|#4        | 146/1000 [00:08<00:15, 56.36/s]     15%|#5        | 152/1000 [00:08<00:14, 57.27/s]     16%|#5        | 158/1000 [00:09<00:14, 56.98/s]     16%|#6        | 164/1000 [00:09<00:14, 56.89/s]     17%|#7        | 170/1000 [00:09<00:14, 57.26/s]     18%|#7        | 176/1000 [00:09<00:14, 57.17/s]     18%|#8        | 182/1000 [00:09<00:14, 56.47/s]     19%|#8        | 188/1000 [00:09<00:14, 54.86/s]     20%|#9        | 195/1000 [00:09<00:14, 57.44/s]     20%|##        | 201/1000 [00:09<00:13, 57.09/s]     21%|##        | 207/1000 [00:09<00:13, 57.61/s]     21%|##1       | 213/1000 [00:10<00:13, 57.51/s]     22%|##1       | 219/1000 [00:10<00:13, 56.99/s]     22%|##2       | 225/1000 [00:10<00:13, 56.60/s]     23%|##3       | 231/1000 [00:10<00:14, 54.39/s]     24%|##3       | 237/1000 [00:10<00:13, 55.77/s]     24%|##4       | 243/1000 [00:10<00:13, 55.88/s]     25%|##4       | 249/1000 [00:10<00:13, 56.27/s]     26%|##5       | 255/1000 [00:10<00:13, 55.83/s]     26%|##6       | 261/1000 [00:10<00:13, 56.07/s]     27%|##6       | 267/1000 [00:11<00:13, 54.14/s]     27%|##7       | 274/1000 [00:11<00:13, 55.04/s]     28%|##8       | 280/1000 [00:11<00:12, 55.47/s]     29%|##8       | 287/1000 [00:11<00:12, 57.22/s]     29%|##9       | 294/1000 [00:11<00:12, 57.07/s]     30%|###       | 300/1000 [00:11<00:12, 56.51/s]     31%|###       | 306/1000 [00:11<00:12, 56.67/s]     31%|###1      | 312/1000 [00:11<00:12, 56.47/s]     32%|###1      | 318/1000 [00:11<00:12, 56.44/s]     32%|###2      | 324/1000 [00:12<00:12, 55.63/s]     33%|###3      | 330/1000 [00:12<00:11, 56.03/s]     34%|###3      | 336/1000 [00:12<00:12, 55.00/s]     34%|###4      | 342/1000 [00:12<00:11, 54.87/s]     35%|###4      | 348/1000 [00:12<00:11, 55.08/s]     35%|###5      | 354/1000 [00:12<00:11, 55.98/s]     36%|###6      | 360/1000 [00:12<00:11, 56.17/s]     37%|###6      | 366/1000 [00:12<00:11, 54.63/s]     37%|###7      | 373/1000 [00:12<00:11, 56.48/s]     38%|###7      | 379/1000 [00:13<00:11, 53.92/s]     38%|###8      | 385/1000 [00:13<00:11, 54.00/s]     39%|###9      | 391/1000 [00:13<00:11, 54.52/s]     40%|###9      | 397/1000 [00:13<00:10, 55.62/s]     40%|####      | 403/1000 [00:13<00:10, 54.52/s]     41%|####1     | 410/1000 [00:13<00:10, 54.94/s]     42%|####1     | 416/1000 [00:13<00:10, 55.62/s]     42%|####2     | 422/1000 [00:13<00:10, 53.78/s]     43%|####2     | 428/1000 [00:13<00:10, 55.30/s]     43%|####3     | 434/1000 [00:14<00:10, 55.28/s]     44%|####4     | 440/1000 [00:14<00:10, 55.75/s]     45%|####4     | 446/1000 [00:14<00:09, 56.33/s]     45%|####5     | 452/1000 [00:14<00:09, 56.48/s]     46%|####5     | 458/1000 [00:14<00:09, 56.52/s]     46%|####6     | 464/1000 [00:14<00:09, 55.02/s]     47%|####6     | 470/1000 [00:14<00:09, 56.41/s]     48%|####7     | 476/1000 [00:14<00:09, 56.52/s]     48%|####8     | 482/1000 [00:14<00:09, 56.20/s]     49%|####8     | 488/1000 [00:14<00:09, 54.18/s]     50%|####9     | 495/1000 [00:15<00:08, 56.35/s]     50%|#####     | 501/1000 [00:15<00:08, 56.29/s]     51%|#####     | 507/1000 [00:15<00:08, 56.27/s]     51%|#####1    | 513/1000 [00:15<00:09, 52.29/s]     52%|#####1    | 519/1000 [00:15<00:09, 48.68/s]     52%|#####2    | 525/1000 [00:15<00:09, 50.07/s]     53%|#####3    | 531/1000 [00:15<00:09, 51.36/s]     54%|#####3    | 538/1000 [00:15<00:08, 54.55/s]     54%|#####4    | 544/1000 [00:16<00:08, 54.64/s]     55%|#####5    | 550/1000 [00:16<00:08, 54.86/s]     56%|#####5    | 556/1000 [00:16<00:08, 54.94/s]     56%|#####6    | 562/1000 [00:16<00:07, 55.86/s]     57%|#####6    | 568/1000 [00:16<00:07, 55.79/s]     57%|#####7    | 574/1000 [00:16<00:07, 55.78/s]     58%|#####8    | 580/1000 [00:16<00:07, 55.81/s]     59%|#####8    | 586/1000 [00:16<00:07, 55.54/s]     59%|#####9    | 592/1000 [00:16<00:07, 56.45/s]     60%|#####9    | 598/1000 [00:17<00:07, 55.79/s]     60%|######    | 604/1000 [00:17<00:07, 51.54/s]     61%|######1   | 611/1000 [00:17<00:07, 53.67/s]     62%|######1   | 617/1000 [00:17<00:07, 54.18/s]     62%|######2   | 623/1000 [00:17<00:06, 54.63/s]     63%|######2   | 629/1000 [00:17<00:07, 48.83/s]     64%|######3   | 635/1000 [00:17<00:07, 48.76/s]     64%|######4   | 641/1000 [00:17<00:07, 48.41/s]     65%|######4   | 647/1000 [00:17<00:07, 49.59/s]     65%|######5   | 653/1000 [00:18<00:06, 50.31/s]     66%|######5   | 659/1000 [00:18<00:06, 50.70/s]     66%|######6   | 665/1000 [00:18<00:06, 50.39/s]     67%|######7   | 671/1000 [00:18<00:07, 45.67/s]     68%|######7   | 676/1000 [00:18<00:07, 44.24/s]     68%|######8   | 681/1000 [00:18<00:07, 40.05/s]     69%|######8   | 686/1000 [00:18<00:07, 39.38/s]     69%|######9   | 691/1000 [00:19<00:08, 38.36/s]     70%|######9   | 696/1000 [00:19<00:07, 39.03/s]     70%|#######   | 700/1000 [00:19<00:08, 37.32/s]     71%|#######   | 706/1000 [00:19<00:06, 42.04/s]     71%|#######1  | 711/1000 [00:19<00:07, 39.99/s]     72%|#######1  | 716/1000 [00:19<00:06, 40.76/s]     72%|#######2  | 721/1000 [00:19<00:06, 42.37/s]     73%|#######2  | 727/1000 [00:19<00:05, 46.25/s]     73%|#######3  | 733/1000 [00:19<00:05, 47.82/s]     74%|#######3  | 738/1000 [00:20<00:05, 47.63/s]     74%|#######4  | 744/1000 [00:20<00:05, 48.99/s]     75%|#######5  | 750/1000 [00:20<00:04, 50.25/s]     76%|#######5  | 756/1000 [00:20<00:04, 50.47/s]     76%|#######6  | 762/1000 [00:20<00:04, 51.58/s]     77%|#######6  | 768/1000 [00:20<00:04, 51.77/s]     77%|#######7  | 774/1000 [00:20<00:04, 52.86/s]     78%|#######8  | 780/1000 [00:20<00:04, 53.34/s]     79%|#######8  | 786/1000 [00:21<00:04, 44.80/s]     79%|#######9  | 791/1000 [00:21<00:04, 44.85/s]     80%|#######9  | 796/1000 [00:21<00:05, 38.89/s]     80%|########  | 801/1000 [00:21<00:04, 40.39/s]     81%|########  | 806/1000 [00:21<00:04, 39.95/s]     81%|########1 | 812/1000 [00:21<00:04, 42.45/s]     82%|########1 | 818/1000 [00:21<00:03, 46.13/s]     82%|########2 | 823/1000 [00:21<00:04, 41.63/s]     83%|########2 | 829/1000 [00:22<00:03, 43.14/s]     83%|########3 | 834/1000 [00:22<00:03, 44.82/s]     84%|########3 | 839/1000 [00:22<00:03, 44.53/s]     84%|########4 | 844/1000 [00:22<00:03, 44.23/s]     85%|########4 | 849/1000 [00:22<00:03, 41.31/s]     85%|########5 | 854/1000 [00:22<00:03, 41.62/s]     86%|########5 | 859/1000 [00:22<00:03, 40.22/s]     86%|########6 | 864/1000 [00:22<00:03, 39.02/s]     87%|########6 | 869/1000 [00:23<00:03, 40.87/s]     87%|########7 | 874/1000 [00:23<00:02, 42.84/s]     88%|########7 | 879/1000 [00:23<00:02, 41.46/s]     88%|########8 | 884/1000 [00:23<00:02, 41.99/s]     89%|########9 | 890/1000 [00:23<00:02, 44.68/s]     90%|########9 | 896/1000 [00:23<00:02, 47.14/s]     90%|######### | 902/1000 [00:23<00:02, 48.08/s]     91%|######### | 908/1000 [00:23<00:01, 51.14/s]     91%|#########1| 914/1000 [00:23<00:01, 50.74/s]     92%|#########2| 920/1000 [00:24<00:01, 52.53/s]     93%|#########2| 926/1000 [00:24<00:01, 52.70/s]     93%|#########3| 932/1000 [00:24<00:01, 52.80/s]     94%|#########3| 938/1000 [00:24<00:01, 51.73/s]     94%|#########4| 944/1000 [00:24<00:01, 51.30/s]     95%|#########5| 950/1000 [00:24<00:00, 53.44/s]     96%|#########5| 956/1000 [00:24<00:00, 53.67/s]     96%|#########6| 962/1000 [00:24<00:00, 53.69/s]     97%|#########6| 968/1000 [00:25<00:00, 53.76/s]     97%|#########7| 974/1000 [00:25<00:00, 52.44/s]     98%|#########8| 980/1000 [00:25<00:00, 53.33/s]     99%|#########8| 986/1000 [00:25<00:00, 52.76/s]     99%|#########9| 992/1000 [00:25<00:00, 53.57/s]    100%|#########9| 998/1000 [00:25<00:00, 54.51/s]    100%|##########| 1000/1000 [00:25<00:00, 39.07/s]




.. GENERATED FROM PYTHON SOURCE LINES 64-68

A similar analysis can be performed with :func:`squidpy.gr.interaction_matrix`.
The function computes the number of shared edges in the neighbor graph between clusters.
Please see :ref:`sphx_glr_auto_examples_graph_compute_interaction_matrix.py` for more details
of how this function works.

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: default

    sq.gr.interaction_matrix(adata, cluster_key="cluster")
    sq.pl.interaction_matrix(adata, cluster_key="cluster", method="ward", vmax=20000)





.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
   :alt: Interaction matrix
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-88

Additional analyses to gain quantitative understanding of spatial patterning of
sub-cellular observations are:
- :ref:`sphx_glr_auto_examples_graph_compute_ripley.py` for Ripley's statistics.
- :ref:`sphx_glr_auto_examples_graph_compute_co_occurrence.py` for co-occurrence score.

Spatially variable genes with spatial autocorrelation statistics
----------------------------------------------------------------
With Squidpy we can investigate spatial variability of gene expression.
This is an example of a function that only supports 2D data.
:func:`squidpy.gr.spatial_autocorr` conveniently wraps two
spatial autocorrelation statistics: *Moran's I* and *Geary's C*.
They provide a score on the degree of spatial variability of gene expression.
The statistic as well as the p-value are computed for each gene, and FDR correction
is performed. For the purpose of this tutorial, let's compute the *Moran's I* score.
See :ref:`sphx_glr_auto_examples_graph_compute_moran.py` for more details.

.. GENERATED FROM PYTHON SOURCE LINES 88-93

.. code-block:: default


    adata.var_names_make_unique()
    sq.gr.spatial_autocorr(adata, mode="moran")
    adata.uns["moranI"].head(10)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>I</th>
          <th>pval_norm</th>
          <th>var_norm</th>
          <th>pval_norm_fdr_bh</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Yap/Taz</th>
          <td>0.972922</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CRT</th>
          <td>0.958546</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TUBA1A</th>
          <td>0.939593</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>NUPS</th>
          <td>0.915081</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>TFRC</th>
          <td>0.895695</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>HSP60</th>
          <td>0.889447</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Actin</th>
          <td>0.879185</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>CTNNB1</th>
          <td>0.876350</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>Climp63</th>
          <td>0.873912</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
        <tr>
          <th>VINC</th>
          <td>0.862451</td>
          <td>0.0</td>
          <td>0.000001</td>
          <td>0.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 94-96

The results are stored in `adata.uns['moranI']` and we can visualize selected genes
with :func:`scanpy.pl.spatial`.

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. code-block:: default


    sc.pl.spatial(adata, color="Yap/Taz", spot_size=1)



.. image-sg:: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
   :alt: Yap/Taz
   :srcset: /auto_tutorials/images/sphx_glr_tutorial_fouri_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  7.864 seconds)

**Estimated memory usage:**  1295 MB


.. _sphx_glr_download_auto_tutorials_tutorial_fouri.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_fouri.py <tutorial_fouri.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_fouri.ipynb <tutorial_fouri.ipynb>`
